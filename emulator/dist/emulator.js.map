{"version":3,"sources":["../../node_modules/avr8js/dist/esm/cpu/interrupt.js","../../node_modules/avr8js/dist/esm/cpu/cpu.js","../../node_modules/avr8js/dist/esm/cpu/instruction.js","../../node_modules/avr8js/dist/esm/peripherals/gpio.js","../../node_modules/avr8js/dist/esm/peripherals/timer.js","../../node_modules/avr8js/dist/esm/peripherals/usart.js","../../node_modules/avr8js/dist/esm/peripherals/eeprom.js","../../node_modules/avr8js/dist/esm/peripherals/twi.js","../../node_modules/avr8js/dist/esm/peripherals/spi.js","../../node_modules/avr8js/dist/esm/peripherals/clock.js","../../node_modules/avr8js/dist/esm/index.js","intelhex.js","emulator.js"],"names":["avrInterrupt","cpu","addr","sp","dataView","getUint16","data","pc","pc22Bits","setUint16","cycles","registerSpace","CPU","constructor","progMem","sramBytes","Uint8Array","data16","Uint16Array","buffer","DataView","progBytes","readHooks","writeHooks","pendingInterrupts","clockEvents","length","gpioTimerHooks","nextInterrupt","nextClockEvent","reset","fill","SP","splice","readData","writeData","value","hook","SREG","interruptsEnabled","updateNextInterrupt","findIndex","item","setInterruptFlag","interrupt","flagRegister","flagMask","enableRegister","enableMask","inverseFlag","queueInterrupt","updateInterruptEnable","registerValue","clearInterrupt","address","clearFlag","clearInterruptByFlag","addClockEvent","callback","entry","Math","max","push","unshift","i","updateClockEvent","clearClockEvent","_a","_b","index","tick","_c","shift","constant","isTwoWordInstruction","opcode","avrInstruction","d","r","sum","R","sreg","b","k","ret","A","val1","val2","arg1","arg2","nextOpcode","skipSize","retAddr","eind","rampz","v1","v2","getInt8","setInt16","clear","set","x","y","z","r2","d2","target","a","l","portAConfig","PIN","DDR","PORT","portBConfig","portCConfig","portDConfig","portEConfig","portFConfig","portGConfig","portHConfig","portJConfig","portKConfig","portLConfig","PinState","PinOverrideMode","AVRIOPort","portConfig","listeners","pinValue","overrideMask","lastValue","lastDdr","portValue","updatePinRegister","writeGpio","ddrMask","oldPortValue","pin","mode","pinMask","None","Enable","overrideValue","Set","Clear","Toggle","addListener","listener","removeListener","filter","pinState","ddr","port","bitMask","High","Low","InputPullUp","Input","setPin","newValue","prevValue","timer01Dividers","defaultTimerBits","TOV","OCFA","OCFB","TOIE","OCIEA","OCIEB","timer0Config","Object","assign","bits","captureInterrupt","compAInterrupt","compBInterrupt","ovfInterrupt","TIFR","OCRA","OCRB","ICR","TCNT","TCCRA","TCCRB","TCCRC","TIMSK","dividers","compPortA","compPinA","compPortB","compPinB","timer1Config","timer2Config","TimerMode","TOVUpdateMode","OCRUpdateMode","TopOCRA","TopICR","OCToggle","Normal","PWMPhaseCorrect","CTC","FastPWM","Reserved","PWMPhaseFrequencyCorrect","wgmModes8Bit","Immediate","Max","Top","Bottom","wgmModes16Bit","compToOverride","comp","AVRTimer","config","MAX","lastCycle","ocrA","nextOcrA","ocrB","nextOcrB","ocrUpdateMode","tovUpdateMode","icr","tcnt","tcntNext","tcntUpdated","updateDivider","countingUp","divider","highByteTemp","OVF","count","reschedule","delta","counterDelta","floor","val","timerMode","TOP","phasePwm","newVal","phasePwmCount","overflow","timerUpdated","compA","compB","updateCompPin","newDivider","CS","updateWGMConfig","updateTempRegister","WGM","mask","topValue","wgmModes","flags","pwmMode","prevCompA","updateCompA","prevCompB","updateCompB","compValue","pinName","bottom","invertingMode","isSet","usart0Config","rxCompleteInterrupt","dataRegisterEmptyInterrupt","txCompleteInterrupt","UCSRA","UCSRB","UCSRC","UBRRL","UBRRH","UDR","UCSRA_RXC","UCSRA_TXC","UCSRA_UDRE","UCSRA_FE","UCSRA_DOR","UCSRA_UPE","UCSRA_U2X","UCSRA_MPCM","UCSRB_RXCIE","UCSRB_TXCIE","UCSRB_UDRIE","UCSRB_RXEN","UCSRB_TXEN","UCSRB_UCSZ2","UCSRB_RXB8","UCSRB_TXB8","UCSRC_UMSEL1","UCSRC_UMSEL0","UCSRC_UPM1","UCSRC_UPM0","UCSRC_USBS","UCSRC_UCSZ1","UCSRC_UCSZ0","UCSRC_UCPOL","rxMasks","AVRUSART","freqHz","onByteTransmit","onLineTransmit","onRxComplete","rxBusyValue","rxByte","lineBuffer","RXC","UDRE","TXC","oldValue","bitsPerChar","result","ch","String","fromCharCode","cyclesPerChar","rxBusy","writeByte","call","symbolsPerChar","stopBits","parityEnabled","UBRR","multiplier","baudRate","ucsz","parityOdd","EEPROMMemoryBackend","size","memory","readMemory","writeMemory","eraseMemory","eepromConfig","eepromReadyInterrupt","EECR","EEDR","EEARL","EEARH","eraseCycles","writeCycles","EERE","EEPE","EEMPE","EERIE","EEPM0","EEPM1","AVREEPROM","backend","writeEnabledCycles","writeCompleteCycles","EER","eecr","eempeCycles","eedr","TWCR_TWINT","TWCR_TWEA","TWCR_TWSTA","TWCR_TWSTO","TWCR_TWWC","TWCR_TWEN","TWCR_TWIE","TWSR_TWS_MASK","TWSR_TWPS1","TWSR_TWPS0","TWSR_TWPS_MASK","TWAR_TWA_MASK","TWAR_TWGCE","STATUS_BUS_ERROR","STATUS_TWI_IDLE","STATUS_START","STATUS_REPEATED_START","STATUS_SLAW_ACK","STATUS_SLAW_NACK","STATUS_DATA_SENT_ACK","STATUS_DATA_SENT_NACK","STATUS_DATA_LOST_ARBITRATION","STATUS_SLAR_ACK","STATUS_SLAR_NACK","STATUS_DATA_RECEIVED_ACK","STATUS_DATA_RECEIVED_NACK","twiConfig","twiInterrupt","TWBR","TWSR","TWAR","TWDR","TWCR","TWAMR","NoopTWIEventHandler","twi","start","completeStart","stop","completeStop","connectToSlave","completeConnect","completeWrite","readByte","completeRead","AVRTWI","eventHandler","TWI","updateStatus","clearInt","status","twdrValue","ack","prescaler","Error","sclFrequency","SPCR_SPIE","SPCR_SPE","SPCR_DORD","SPCR_MSTR","SPCR_CPOL","SPCR_CPHA","SPCR_SPR1","SPCR_SPR0","SPSR_SPR_MASK","SPSR_SPIF","SPSR_WCOL","SPSR_SPI2X","spiConfig","spiInterrupt","SPCR","SPSR","SPDR","bitsPerByte","AVRSPI","onTransfer","transmissionActive","receivedByte","SPI","cyclesToComplete","clockDivider","isMaster","dataOrder","spiMode","base","spiFrequency","CLKPCE","clockConfig","CLKPR","prescalers","AVRClock","baseFreqHz","clockEnabledCycles","prescalerValue","cyclesDelta","clkpr","oldPrescaler","frequency","timeNanos","timeMicros","timeMillis","loadHex","source","line","split","substr","bytes","parseInt","Emulator","leds","button","frameId","timer0","portA","portB","portC","portD","program","clockFrequency","flashSize","loadGame","hex","temp","avr8js","initPorts","domElement","addEventListener","buttonPressHandler","buttonReleaseHandler","ledHandler","avrPort","avrPin","connectedLeds","led","classList","remove","add","state","executeGame","deadline","requestAnimationFrame","stopGame","cancelAnimationFrame","window"],"mappings":"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","file":"emulator.js","sourceRoot":"../src","sourcesContent":["/**\r\n * AVR-8 Interrupt Handling\r\n * Part of AVR8js\r\n * Reference: http://ww1.microchip.com/downloads/en/devicedoc/atmel-0856-avr-instruction-set-manual.pdf\r\n *\r\n * Copyright (C) 2019, Uri Shaked\r\n */\r\nexport function avrInterrupt(cpu, addr) {\r\n    const sp = cpu.dataView.getUint16(93, true);\r\n    cpu.data[sp] = cpu.pc & 0xff;\r\n    cpu.data[sp - 1] = (cpu.pc >> 8) & 0xff;\r\n    if (cpu.pc22Bits) {\r\n        cpu.data[sp - 2] = (cpu.pc >> 16) & 0xff;\r\n    }\r\n    cpu.dataView.setUint16(93, sp - (cpu.pc22Bits ? 3 : 2), true);\r\n    cpu.data[95] &= 0x7f; // clear global interrupt flag\r\n    cpu.cycles += 2;\r\n    cpu.pc = addr;\r\n}\r\n","/**\r\n * AVR 8 CPU data structures\r\n * Part of AVR8js\r\n *\r\n * Copyright (C) 2019, Uri Shaked\r\n */\r\nimport { avrInterrupt } from './interrupt';\r\nconst registerSpace = 0x100;\r\nexport class CPU {\r\n    constructor(progMem, sramBytes = 8192) {\r\n        this.progMem = progMem;\r\n        this.sramBytes = sramBytes;\r\n        this.data = new Uint8Array(this.sramBytes + registerSpace);\r\n        this.data16 = new Uint16Array(this.data.buffer);\r\n        this.dataView = new DataView(this.data.buffer);\r\n        this.progBytes = new Uint8Array(this.progMem.buffer);\r\n        this.readHooks = [];\r\n        this.writeHooks = [];\r\n        this.pendingInterrupts = [];\r\n        this.clockEvents = [];\r\n        this.pc22Bits = this.progBytes.length > 0x20000;\r\n        // This lets the Timer Compare output override GPIO pins:\r\n        this.gpioTimerHooks = [];\r\n        this.pc = 0;\r\n        this.cycles = 0;\r\n        this.nextInterrupt = -1;\r\n        this.nextClockEvent = 0;\r\n        this.reset();\r\n    }\r\n    reset() {\r\n        this.data.fill(0);\r\n        this.SP = this.data.length - 1;\r\n        this.pendingInterrupts.splice(0, this.pendingInterrupts.length);\r\n        this.nextInterrupt = -1;\r\n    }\r\n    readData(addr) {\r\n        if (addr >= 32 && this.readHooks[addr]) {\r\n            return this.readHooks[addr](addr);\r\n        }\r\n        return this.data[addr];\r\n    }\r\n    writeData(addr, value) {\r\n        const hook = this.writeHooks[addr];\r\n        if (hook) {\r\n            if (hook(value, this.data[addr], addr)) {\r\n                return;\r\n            }\r\n        }\r\n        this.data[addr] = value;\r\n    }\r\n    get SP() {\r\n        return this.dataView.getUint16(93, true);\r\n    }\r\n    set SP(value) {\r\n        this.dataView.setUint16(93, value, true);\r\n    }\r\n    get SREG() {\r\n        return this.data[95];\r\n    }\r\n    get interruptsEnabled() {\r\n        return this.SREG & 0x80 ? true : false;\r\n    }\r\n    updateNextInterrupt() {\r\n        this.nextInterrupt = this.pendingInterrupts.findIndex((item) => !!item);\r\n    }\r\n    setInterruptFlag(interrupt) {\r\n        const { flagRegister, flagMask, enableRegister, enableMask } = interrupt;\r\n        if (interrupt.inverseFlag) {\r\n            this.data[flagRegister] &= ~flagMask;\r\n        }\r\n        else {\r\n            this.data[flagRegister] |= flagMask;\r\n        }\r\n        if (this.data[enableRegister] & enableMask) {\r\n            this.queueInterrupt(interrupt);\r\n        }\r\n    }\r\n    updateInterruptEnable(interrupt, registerValue) {\r\n        const { enableMask, flagRegister, flagMask } = interrupt;\r\n        if (registerValue & enableMask) {\r\n            if (this.data[flagRegister] & flagMask) {\r\n                this.queueInterrupt(interrupt);\r\n            }\r\n        }\r\n        else {\r\n            this.clearInterrupt(interrupt, false);\r\n        }\r\n    }\r\n    queueInterrupt(interrupt) {\r\n        this.pendingInterrupts[interrupt.address] = interrupt;\r\n        this.updateNextInterrupt();\r\n    }\r\n    clearInterrupt({ address, flagRegister, flagMask }, clearFlag = true) {\r\n        delete this.pendingInterrupts[address];\r\n        if (clearFlag) {\r\n            this.data[flagRegister] &= ~flagMask;\r\n        }\r\n        this.updateNextInterrupt();\r\n    }\r\n    clearInterruptByFlag(interrupt, registerValue) {\r\n        const { flagRegister, flagMask } = interrupt;\r\n        if (registerValue & flagMask) {\r\n            this.data[flagRegister] &= ~flagMask;\r\n            this.clearInterrupt(interrupt);\r\n        }\r\n    }\r\n    addClockEvent(callback, cycles) {\r\n        const entry = { cycles: this.cycles + Math.max(1, cycles), callback };\r\n        // Add the new entry while keeping the array sorted\r\n        const { clockEvents } = this;\r\n        if (!clockEvents.length || clockEvents[clockEvents.length - 1].cycles <= entry.cycles) {\r\n            clockEvents.push(entry);\r\n        }\r\n        else if (clockEvents[0].cycles >= entry.cycles) {\r\n            clockEvents.unshift(entry);\r\n        }\r\n        else {\r\n            for (let i = 1; i < clockEvents.length; i++) {\r\n                if (clockEvents[i].cycles >= entry.cycles) {\r\n                    clockEvents.splice(i, 0, entry);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        this.nextClockEvent = this.clockEvents[0].cycles;\r\n        return callback;\r\n    }\r\n    updateClockEvent(callback, cycles) {\r\n        if (this.clearClockEvent(callback)) {\r\n            this.addClockEvent(callback, cycles);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    clearClockEvent(callback) {\r\n        var _a, _b;\r\n        const index = this.clockEvents.findIndex((item) => item.callback === callback);\r\n        if (index >= 0) {\r\n            this.clockEvents.splice(index, 1);\r\n            this.nextClockEvent = (_b = (_a = this.clockEvents[0]) === null || _a === void 0 ? void 0 : _a.cycles) !== null && _b !== void 0 ? _b : 0;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    tick() {\r\n        var _a, _b, _c;\r\n        const { nextClockEvent, clockEvents } = this;\r\n        if (nextClockEvent && nextClockEvent <= this.cycles) {\r\n            (_a = clockEvents.shift()) === null || _a === void 0 ? void 0 : _a.callback();\r\n            this.nextClockEvent = (_c = (_b = clockEvents[0]) === null || _b === void 0 ? void 0 : _b.cycles) !== null && _c !== void 0 ? _c : 0;\r\n        }\r\n        const { nextInterrupt } = this;\r\n        if (this.interruptsEnabled && nextInterrupt >= 0) {\r\n            const interrupt = this.pendingInterrupts[nextInterrupt];\r\n            avrInterrupt(this, interrupt.address);\r\n            if (!interrupt.constant) {\r\n                this.clearInterrupt(interrupt);\r\n            }\r\n        }\r\n    }\r\n}\r\n","/**\r\n * AVR-8 Instruction Simulation\r\n * Part of AVR8js\r\n *\r\n * Reference: http://ww1.microchip.com/downloads/en/devicedoc/atmel-0856-avr-instruction-set-manual.pdf\r\n *\r\n * Instruction timing is currently based on ATmega328p (see the Instruction Set Summary at the end of\r\n * the datasheet)\r\n *\r\n * Copyright (C) 2019, 2020 Uri Shaked\r\n */\r\nfunction isTwoWordInstruction(opcode) {\r\n    return (\r\n    /* LDS */\r\n    (opcode & 0xfe0f) === 0x9000 ||\r\n        /* STS */\r\n        (opcode & 0xfe0f) === 0x9200 ||\r\n        /* CALL */\r\n        (opcode & 0xfe0e) === 0x940e ||\r\n        /* JMP */\r\n        (opcode & 0xfe0e) === 0x940c);\r\n}\r\nexport function avrInstruction(cpu) {\r\n    const opcode = cpu.progMem[cpu.pc];\r\n    if ((opcode & 0xfc00) === 0x1c00) {\r\n        /* ADC, 0001 11rd dddd rrrr */\r\n        const d = cpu.data[(opcode & 0x1f0) >> 4];\r\n        const r = cpu.data[(opcode & 0xf) | ((opcode & 0x200) >> 5)];\r\n        const sum = d + r + (cpu.data[95] & 1);\r\n        const R = sum & 255;\r\n        cpu.data[(opcode & 0x1f0) >> 4] = R;\r\n        let sreg = cpu.data[95] & 0xc0;\r\n        sreg |= R ? 0 : 2;\r\n        sreg |= 128 & R ? 4 : 0;\r\n        sreg |= (R ^ r) & (d ^ R) & 128 ? 8 : 0;\r\n        sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n        sreg |= sum & 256 ? 1 : 0;\r\n        sreg |= 1 & ((d & r) | (r & ~R) | (~R & d)) ? 0x20 : 0;\r\n        cpu.data[95] = sreg;\r\n    }\r\n    else if ((opcode & 0xfc00) === 0xc00) {\r\n        /* ADD, 0000 11rd dddd rrrr */\r\n        const d = cpu.data[(opcode & 0x1f0) >> 4];\r\n        const r = cpu.data[(opcode & 0xf) | ((opcode & 0x200) >> 5)];\r\n        const R = (d + r) & 255;\r\n        cpu.data[(opcode & 0x1f0) >> 4] = R;\r\n        let sreg = cpu.data[95] & 0xc0;\r\n        sreg |= R ? 0 : 2;\r\n        sreg |= 128 & R ? 4 : 0;\r\n        sreg |= (R ^ r) & (R ^ d) & 128 ? 8 : 0;\r\n        sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n        sreg |= (d + r) & 256 ? 1 : 0;\r\n        sreg |= 1 & ((d & r) | (r & ~R) | (~R & d)) ? 0x20 : 0;\r\n        cpu.data[95] = sreg;\r\n    }\r\n    else if ((opcode & 0xff00) === 0x9600) {\r\n        /* ADIW, 1001 0110 KKdd KKKK */\r\n        const addr = 2 * ((opcode & 0x30) >> 4) + 24;\r\n        const value = cpu.dataView.getUint16(addr, true);\r\n        const R = (value + ((opcode & 0xf) | ((opcode & 0xc0) >> 2))) & 0xffff;\r\n        cpu.dataView.setUint16(addr, R, true);\r\n        let sreg = cpu.data[95] & 0xe0;\r\n        sreg |= R ? 0 : 2;\r\n        sreg |= 0x8000 & R ? 4 : 0;\r\n        sreg |= ~value & R & 0x8000 ? 8 : 0;\r\n        sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n        sreg |= ~R & value & 0x8000 ? 1 : 0;\r\n        cpu.data[95] = sreg;\r\n        cpu.cycles++;\r\n    }\r\n    else if ((opcode & 0xfc00) === 0x2000) {\r\n        /* AND, 0010 00rd dddd rrrr */\r\n        const R = cpu.data[(opcode & 0x1f0) >> 4] & cpu.data[(opcode & 0xf) | ((opcode & 0x200) >> 5)];\r\n        cpu.data[(opcode & 0x1f0) >> 4] = R;\r\n        let sreg = cpu.data[95] & 0xe1;\r\n        sreg |= R ? 0 : 2;\r\n        sreg |= 128 & R ? 4 : 0;\r\n        sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n        cpu.data[95] = sreg;\r\n    }\r\n    else if ((opcode & 0xf000) === 0x7000) {\r\n        /* ANDI, 0111 KKKK dddd KKKK */\r\n        const R = cpu.data[((opcode & 0xf0) >> 4) + 16] & ((opcode & 0xf) | ((opcode & 0xf00) >> 4));\r\n        cpu.data[((opcode & 0xf0) >> 4) + 16] = R;\r\n        let sreg = cpu.data[95] & 0xe1;\r\n        sreg |= R ? 0 : 2;\r\n        sreg |= 128 & R ? 4 : 0;\r\n        sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n        cpu.data[95] = sreg;\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x9405) {\r\n        /* ASR, 1001 010d dddd 0101 */\r\n        const value = cpu.data[(opcode & 0x1f0) >> 4];\r\n        const R = (value >>> 1) | (128 & value);\r\n        cpu.data[(opcode & 0x1f0) >> 4] = R;\r\n        let sreg = cpu.data[95] & 0xe0;\r\n        sreg |= R ? 0 : 2;\r\n        sreg |= 128 & R ? 4 : 0;\r\n        sreg |= value & 1;\r\n        sreg |= ((sreg >> 2) & 1) ^ (sreg & 1) ? 8 : 0;\r\n        sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n        cpu.data[95] = sreg;\r\n    }\r\n    else if ((opcode & 0xff8f) === 0x9488) {\r\n        /* BCLR, 1001 0100 1sss 1000 */\r\n        cpu.data[95] &= ~(1 << ((opcode & 0x70) >> 4));\r\n    }\r\n    else if ((opcode & 0xfe08) === 0xf800) {\r\n        /* BLD, 1111 100d dddd 0bbb */\r\n        const b = opcode & 7;\r\n        const d = (opcode & 0x1f0) >> 4;\r\n        cpu.data[d] = (~(1 << b) & cpu.data[d]) | (((cpu.data[95] >> 6) & 1) << b);\r\n    }\r\n    else if ((opcode & 0xfc00) === 0xf400) {\r\n        /* BRBC, 1111 01kk kkkk ksss */\r\n        if (!(cpu.data[95] & (1 << (opcode & 7)))) {\r\n            cpu.pc = cpu.pc + (((opcode & 0x1f8) >> 3) - (opcode & 0x200 ? 0x40 : 0));\r\n            cpu.cycles++;\r\n        }\r\n    }\r\n    else if ((opcode & 0xfc00) === 0xf000) {\r\n        /* BRBS, 1111 00kk kkkk ksss */\r\n        if (cpu.data[95] & (1 << (opcode & 7))) {\r\n            cpu.pc = cpu.pc + (((opcode & 0x1f8) >> 3) - (opcode & 0x200 ? 0x40 : 0));\r\n            cpu.cycles++;\r\n        }\r\n    }\r\n    else if ((opcode & 0xff8f) === 0x9408) {\r\n        /* BSET, 1001 0100 0sss 1000 */\r\n        cpu.data[95] |= 1 << ((opcode & 0x70) >> 4);\r\n    }\r\n    else if ((opcode & 0xfe08) === 0xfa00) {\r\n        /* BST, 1111 101d dddd 0bbb */\r\n        const d = cpu.data[(opcode & 0x1f0) >> 4];\r\n        const b = opcode & 7;\r\n        cpu.data[95] = (cpu.data[95] & 0xbf) | ((d >> b) & 1 ? 0x40 : 0);\r\n    }\r\n    else if ((opcode & 0xfe0e) === 0x940e) {\r\n        /* CALL, 1001 010k kkkk 111k kkkk kkkk kkkk kkkk */\r\n        const k = cpu.progMem[cpu.pc + 1] | ((opcode & 1) << 16) | ((opcode & 0x1f0) << 13);\r\n        const ret = cpu.pc + 2;\r\n        const sp = cpu.dataView.getUint16(93, true);\r\n        const { pc22Bits } = cpu;\r\n        cpu.data[sp] = 255 & ret;\r\n        cpu.data[sp - 1] = (ret >> 8) & 255;\r\n        if (pc22Bits) {\r\n            cpu.data[sp - 2] = (ret >> 16) & 255;\r\n        }\r\n        cpu.dataView.setUint16(93, sp - (pc22Bits ? 3 : 2), true);\r\n        cpu.pc = k - 1;\r\n        cpu.cycles += pc22Bits ? 4 : 3;\r\n    }\r\n    else if ((opcode & 0xff00) === 0x9800) {\r\n        /* CBI, 1001 1000 AAAA Abbb */\r\n        const A = opcode & 0xf8;\r\n        const b = opcode & 7;\r\n        const R = cpu.readData((A >> 3) + 32);\r\n        cpu.writeData((A >> 3) + 32, R & ~(1 << b));\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x9400) {\r\n        /* COM, 1001 010d dddd 0000 */\r\n        const d = (opcode & 0x1f0) >> 4;\r\n        const R = 255 - cpu.data[d];\r\n        cpu.data[d] = R;\r\n        let sreg = (cpu.data[95] & 0xe1) | 1;\r\n        sreg |= R ? 0 : 2;\r\n        sreg |= 128 & R ? 4 : 0;\r\n        sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n        cpu.data[95] = sreg;\r\n    }\r\n    else if ((opcode & 0xfc00) === 0x1400) {\r\n        /* CP, 0001 01rd dddd rrrr */\r\n        const val1 = cpu.data[(opcode & 0x1f0) >> 4];\r\n        const val2 = cpu.data[(opcode & 0xf) | ((opcode & 0x200) >> 5)];\r\n        const R = val1 - val2;\r\n        let sreg = cpu.data[95] & 0xc0;\r\n        sreg |= R ? 0 : 2;\r\n        sreg |= 128 & R ? 4 : 0;\r\n        sreg |= 0 !== ((val1 ^ val2) & (val1 ^ R) & 128) ? 8 : 0;\r\n        sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n        sreg |= val2 > val1 ? 1 : 0;\r\n        sreg |= 1 & ((~val1 & val2) | (val2 & R) | (R & ~val1)) ? 0x20 : 0;\r\n        cpu.data[95] = sreg;\r\n    }\r\n    else if ((opcode & 0xfc00) === 0x400) {\r\n        /* CPC, 0000 01rd dddd rrrr */\r\n        const arg1 = cpu.data[(opcode & 0x1f0) >> 4];\r\n        const arg2 = cpu.data[(opcode & 0xf) | ((opcode & 0x200) >> 5)];\r\n        let sreg = cpu.data[95];\r\n        const r = arg1 - arg2 - (sreg & 1);\r\n        sreg = (sreg & 0xc0) | (!r && (sreg >> 1) & 1 ? 2 : 0) | (arg2 + (sreg & 1) > arg1 ? 1 : 0);\r\n        sreg |= 128 & r ? 4 : 0;\r\n        sreg |= (arg1 ^ arg2) & (arg1 ^ r) & 128 ? 8 : 0;\r\n        sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n        sreg |= 1 & ((~arg1 & arg2) | (arg2 & r) | (r & ~arg1)) ? 0x20 : 0;\r\n        cpu.data[95] = sreg;\r\n    }\r\n    else if ((opcode & 0xf000) === 0x3000) {\r\n        /* CPI, 0011 KKKK dddd KKKK */\r\n        const arg1 = cpu.data[((opcode & 0xf0) >> 4) + 16];\r\n        const arg2 = (opcode & 0xf) | ((opcode & 0xf00) >> 4);\r\n        const r = arg1 - arg2;\r\n        let sreg = cpu.data[95] & 0xc0;\r\n        sreg |= r ? 0 : 2;\r\n        sreg |= 128 & r ? 4 : 0;\r\n        sreg |= (arg1 ^ arg2) & (arg1 ^ r) & 128 ? 8 : 0;\r\n        sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n        sreg |= arg2 > arg1 ? 1 : 0;\r\n        sreg |= 1 & ((~arg1 & arg2) | (arg2 & r) | (r & ~arg1)) ? 0x20 : 0;\r\n        cpu.data[95] = sreg;\r\n    }\r\n    else if ((opcode & 0xfc00) === 0x1000) {\r\n        /* CPSE, 0001 00rd dddd rrrr */\r\n        if (cpu.data[(opcode & 0x1f0) >> 4] === cpu.data[(opcode & 0xf) | ((opcode & 0x200) >> 5)]) {\r\n            const nextOpcode = cpu.progMem[cpu.pc + 1];\r\n            const skipSize = isTwoWordInstruction(nextOpcode) ? 2 : 1;\r\n            cpu.pc += skipSize;\r\n            cpu.cycles += skipSize;\r\n        }\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x940a) {\r\n        /* DEC, 1001 010d dddd 1010 */\r\n        const value = cpu.data[(opcode & 0x1f0) >> 4];\r\n        const R = value - 1;\r\n        cpu.data[(opcode & 0x1f0) >> 4] = R;\r\n        let sreg = cpu.data[95] & 0xe1;\r\n        sreg |= R ? 0 : 2;\r\n        sreg |= 128 & R ? 4 : 0;\r\n        sreg |= 128 === value ? 8 : 0;\r\n        sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n        cpu.data[95] = sreg;\r\n    }\r\n    else if (opcode === 0x9519) {\r\n        /* EICALL, 1001 0101 0001 1001 */\r\n        const retAddr = cpu.pc + 1;\r\n        const sp = cpu.dataView.getUint16(93, true);\r\n        const eind = cpu.data[0x5c];\r\n        cpu.data[sp] = retAddr & 255;\r\n        cpu.data[sp - 1] = (retAddr >> 8) & 255;\r\n        cpu.data[sp - 2] = (retAddr >> 16) & 255;\r\n        cpu.dataView.setUint16(93, sp - 3, true);\r\n        cpu.pc = ((eind << 16) | cpu.dataView.getUint16(30, true)) - 1;\r\n        cpu.cycles += 3;\r\n    }\r\n    else if (opcode === 0x9419) {\r\n        /* EIJMP, 1001 0100 0001 1001 */\r\n        const eind = cpu.data[0x5c];\r\n        cpu.pc = ((eind << 16) | cpu.dataView.getUint16(30, true)) - 1;\r\n        cpu.cycles++;\r\n    }\r\n    else if (opcode === 0x95d8) {\r\n        /* ELPM, 1001 0101 1101 1000 */\r\n        const rampz = cpu.data[0x5b];\r\n        cpu.data[0] = cpu.progBytes[(rampz << 16) | cpu.dataView.getUint16(30, true)];\r\n        cpu.cycles += 2;\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x9006) {\r\n        /* ELPM(REG), 1001 000d dddd 0110 */\r\n        const rampz = cpu.data[0x5b];\r\n        cpu.data[(opcode & 0x1f0) >> 4] =\r\n            cpu.progBytes[(rampz << 16) | cpu.dataView.getUint16(30, true)];\r\n        cpu.cycles += 2;\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x9007) {\r\n        /* ELPM(INC), 1001 000d dddd 0111 */\r\n        const rampz = cpu.data[0x5b];\r\n        const i = cpu.dataView.getUint16(30, true);\r\n        cpu.data[(opcode & 0x1f0) >> 4] = cpu.progBytes[(rampz << 16) | i];\r\n        cpu.dataView.setUint16(30, i + 1, true);\r\n        if (i === 0xffff) {\r\n            cpu.data[0x5b] = (rampz + 1) % (cpu.progBytes.length >> 16);\r\n        }\r\n        cpu.cycles += 2;\r\n    }\r\n    else if ((opcode & 0xfc00) === 0x2400) {\r\n        /* EOR, 0010 01rd dddd rrrr */\r\n        const R = cpu.data[(opcode & 0x1f0) >> 4] ^ cpu.data[(opcode & 0xf) | ((opcode & 0x200) >> 5)];\r\n        cpu.data[(opcode & 0x1f0) >> 4] = R;\r\n        let sreg = cpu.data[95] & 0xe1;\r\n        sreg |= R ? 0 : 2;\r\n        sreg |= 128 & R ? 4 : 0;\r\n        sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n        cpu.data[95] = sreg;\r\n    }\r\n    else if ((opcode & 0xff88) === 0x308) {\r\n        /* FMUL, 0000 0011 0ddd 1rrr */\r\n        const v1 = cpu.data[((opcode & 0x70) >> 4) + 16];\r\n        const v2 = cpu.data[(opcode & 7) + 16];\r\n        const R = (v1 * v2) << 1;\r\n        cpu.dataView.setUint16(0, R, true);\r\n        cpu.data[95] = (cpu.data[95] & 0xfc) | (0xffff & R ? 0 : 2) | ((v1 * v2) & 0x8000 ? 1 : 0);\r\n        cpu.cycles++;\r\n    }\r\n    else if ((opcode & 0xff88) === 0x380) {\r\n        /* FMULS, 0000 0011 1ddd 0rrr */\r\n        const v1 = cpu.dataView.getInt8(((opcode & 0x70) >> 4) + 16);\r\n        const v2 = cpu.dataView.getInt8((opcode & 7) + 16);\r\n        const R = (v1 * v2) << 1;\r\n        cpu.dataView.setInt16(0, R, true);\r\n        cpu.data[95] = (cpu.data[95] & 0xfc) | (0xffff & R ? 0 : 2) | ((v1 * v2) & 0x8000 ? 1 : 0);\r\n        cpu.cycles++;\r\n    }\r\n    else if ((opcode & 0xff88) === 0x388) {\r\n        /* FMULSU, 0000 0011 1ddd 1rrr */\r\n        const v1 = cpu.dataView.getInt8(((opcode & 0x70) >> 4) + 16);\r\n        const v2 = cpu.data[(opcode & 7) + 16];\r\n        const R = (v1 * v2) << 1;\r\n        cpu.dataView.setInt16(0, R, true);\r\n        cpu.data[95] = (cpu.data[95] & 0xfc) | (0xffff & R ? 2 : 0) | ((v1 * v2) & 0x8000 ? 1 : 0);\r\n        cpu.cycles++;\r\n    }\r\n    else if (opcode === 0x9509) {\r\n        /* ICALL, 1001 0101 0000 1001 */\r\n        const retAddr = cpu.pc + 1;\r\n        const sp = cpu.dataView.getUint16(93, true);\r\n        const { pc22Bits } = cpu;\r\n        cpu.data[sp] = retAddr & 255;\r\n        cpu.data[sp - 1] = (retAddr >> 8) & 255;\r\n        if (pc22Bits) {\r\n            cpu.data[sp - 2] = (retAddr >> 16) & 255;\r\n        }\r\n        cpu.dataView.setUint16(93, sp - (pc22Bits ? 3 : 2), true);\r\n        cpu.pc = cpu.dataView.getUint16(30, true) - 1;\r\n        cpu.cycles += pc22Bits ? 3 : 2;\r\n    }\r\n    else if (opcode === 0x9409) {\r\n        /* IJMP, 1001 0100 0000 1001 */\r\n        cpu.pc = cpu.dataView.getUint16(30, true) - 1;\r\n        cpu.cycles++;\r\n    }\r\n    else if ((opcode & 0xf800) === 0xb000) {\r\n        /* IN, 1011 0AAd dddd AAAA */\r\n        const i = cpu.readData(((opcode & 0xf) | ((opcode & 0x600) >> 5)) + 32);\r\n        cpu.data[(opcode & 0x1f0) >> 4] = i;\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x9403) {\r\n        /* INC, 1001 010d dddd 0011 */\r\n        const d = cpu.data[(opcode & 0x1f0) >> 4];\r\n        const r = (d + 1) & 255;\r\n        cpu.data[(opcode & 0x1f0) >> 4] = r;\r\n        let sreg = cpu.data[95] & 0xe1;\r\n        sreg |= r ? 0 : 2;\r\n        sreg |= 128 & r ? 4 : 0;\r\n        sreg |= 127 === d ? 8 : 0;\r\n        sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n        cpu.data[95] = sreg;\r\n    }\r\n    else if ((opcode & 0xfe0e) === 0x940c) {\r\n        /* JMP, 1001 010k kkkk 110k kkkk kkkk kkkk kkkk */\r\n        cpu.pc = (cpu.progMem[cpu.pc + 1] | ((opcode & 1) << 16) | ((opcode & 0x1f0) << 13)) - 1;\r\n        cpu.cycles += 2;\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x9206) {\r\n        /* LAC, 1001 001r rrrr 0110 */\r\n        const r = (opcode & 0x1f0) >> 4;\r\n        const clear = cpu.data[r];\r\n        const value = cpu.readData(cpu.dataView.getUint16(30, true));\r\n        cpu.writeData(cpu.dataView.getUint16(30, true), value & (255 - clear));\r\n        cpu.data[r] = value;\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x9205) {\r\n        /* LAS, 1001 001r rrrr 0101 */\r\n        const r = (opcode & 0x1f0) >> 4;\r\n        const set = cpu.data[r];\r\n        const value = cpu.readData(cpu.dataView.getUint16(30, true));\r\n        cpu.writeData(cpu.dataView.getUint16(30, true), value | set);\r\n        cpu.data[r] = value;\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x9207) {\r\n        /* LAT, 1001 001r rrrr 0111 */\r\n        const r = cpu.data[(opcode & 0x1f0) >> 4];\r\n        const R = cpu.readData(cpu.dataView.getUint16(30, true));\r\n        cpu.writeData(cpu.dataView.getUint16(30, true), r ^ R);\r\n        cpu.data[(opcode & 0x1f0) >> 4] = R;\r\n    }\r\n    else if ((opcode & 0xf000) === 0xe000) {\r\n        /* LDI, 1110 KKKK dddd KKKK */\r\n        cpu.data[((opcode & 0xf0) >> 4) + 16] = (opcode & 0xf) | ((opcode & 0xf00) >> 4);\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x9000) {\r\n        /* LDS, 1001 000d dddd 0000 kkkk kkkk kkkk kkkk */\r\n        cpu.cycles++;\r\n        const value = cpu.readData(cpu.progMem[cpu.pc + 1]);\r\n        cpu.data[(opcode & 0x1f0) >> 4] = value;\r\n        cpu.pc++;\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x900c) {\r\n        /* LDX, 1001 000d dddd 1100 */\r\n        cpu.cycles++;\r\n        cpu.data[(opcode & 0x1f0) >> 4] = cpu.readData(cpu.dataView.getUint16(26, true));\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x900d) {\r\n        /* LDX(INC), 1001 000d dddd 1101 */\r\n        const x = cpu.dataView.getUint16(26, true);\r\n        cpu.cycles++;\r\n        cpu.data[(opcode & 0x1f0) >> 4] = cpu.readData(x);\r\n        cpu.dataView.setUint16(26, x + 1, true);\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x900e) {\r\n        /* LDX(DEC), 1001 000d dddd 1110 */\r\n        const x = cpu.dataView.getUint16(26, true) - 1;\r\n        cpu.dataView.setUint16(26, x, true);\r\n        cpu.cycles++;\r\n        cpu.data[(opcode & 0x1f0) >> 4] = cpu.readData(x);\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x8008) {\r\n        /* LDY, 1000 000d dddd 1000 */\r\n        cpu.cycles++;\r\n        cpu.data[(opcode & 0x1f0) >> 4] = cpu.readData(cpu.dataView.getUint16(28, true));\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x9009) {\r\n        /* LDY(INC), 1001 000d dddd 1001 */\r\n        const y = cpu.dataView.getUint16(28, true);\r\n        cpu.cycles++;\r\n        cpu.data[(opcode & 0x1f0) >> 4] = cpu.readData(y);\r\n        cpu.dataView.setUint16(28, y + 1, true);\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x900a) {\r\n        /* LDY(DEC), 1001 000d dddd 1010 */\r\n        const y = cpu.dataView.getUint16(28, true) - 1;\r\n        cpu.dataView.setUint16(28, y, true);\r\n        cpu.cycles++;\r\n        cpu.data[(opcode & 0x1f0) >> 4] = cpu.readData(y);\r\n    }\r\n    else if ((opcode & 0xd208) === 0x8008 &&\r\n        (opcode & 7) | ((opcode & 0xc00) >> 7) | ((opcode & 0x2000) >> 8)) {\r\n        /* LDDY, 10q0 qq0d dddd 1qqq */\r\n        cpu.cycles++;\r\n        cpu.data[(opcode & 0x1f0) >> 4] = cpu.readData(cpu.dataView.getUint16(28, true) +\r\n            ((opcode & 7) | ((opcode & 0xc00) >> 7) | ((opcode & 0x2000) >> 8)));\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x8000) {\r\n        /* LDZ, 1000 000d dddd 0000 */\r\n        cpu.cycles++;\r\n        cpu.data[(opcode & 0x1f0) >> 4] = cpu.readData(cpu.dataView.getUint16(30, true));\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x9001) {\r\n        /* LDZ(INC), 1001 000d dddd 0001 */\r\n        const z = cpu.dataView.getUint16(30, true);\r\n        cpu.cycles++;\r\n        cpu.data[(opcode & 0x1f0) >> 4] = cpu.readData(z);\r\n        cpu.dataView.setUint16(30, z + 1, true);\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x9002) {\r\n        /* LDZ(DEC), 1001 000d dddd 0010 */\r\n        const z = cpu.dataView.getUint16(30, true) - 1;\r\n        cpu.dataView.setUint16(30, z, true);\r\n        cpu.cycles++;\r\n        cpu.data[(opcode & 0x1f0) >> 4] = cpu.readData(z);\r\n    }\r\n    else if ((opcode & 0xd208) === 0x8000 &&\r\n        (opcode & 7) | ((opcode & 0xc00) >> 7) | ((opcode & 0x2000) >> 8)) {\r\n        /* LDDZ, 10q0 qq0d dddd 0qqq */\r\n        cpu.cycles++;\r\n        cpu.data[(opcode & 0x1f0) >> 4] = cpu.readData(cpu.dataView.getUint16(30, true) +\r\n            ((opcode & 7) | ((opcode & 0xc00) >> 7) | ((opcode & 0x2000) >> 8)));\r\n    }\r\n    else if (opcode === 0x95c8) {\r\n        /* LPM, 1001 0101 1100 1000 */\r\n        cpu.data[0] = cpu.progBytes[cpu.dataView.getUint16(30, true)];\r\n        cpu.cycles += 2;\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x9004) {\r\n        /* LPM(REG), 1001 000d dddd 0100 */\r\n        cpu.data[(opcode & 0x1f0) >> 4] = cpu.progBytes[cpu.dataView.getUint16(30, true)];\r\n        cpu.cycles += 2;\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x9005) {\r\n        /* LPM(INC), 1001 000d dddd 0101 */\r\n        const i = cpu.dataView.getUint16(30, true);\r\n        cpu.data[(opcode & 0x1f0) >> 4] = cpu.progBytes[i];\r\n        cpu.dataView.setUint16(30, i + 1, true);\r\n        cpu.cycles += 2;\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x9406) {\r\n        /* LSR, 1001 010d dddd 0110 */\r\n        const value = cpu.data[(opcode & 0x1f0) >> 4];\r\n        const R = value >>> 1;\r\n        cpu.data[(opcode & 0x1f0) >> 4] = R;\r\n        let sreg = cpu.data[95] & 0xe0;\r\n        sreg |= R ? 0 : 2;\r\n        sreg |= value & 1;\r\n        sreg |= ((sreg >> 2) & 1) ^ (sreg & 1) ? 8 : 0;\r\n        sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n        cpu.data[95] = sreg;\r\n    }\r\n    else if ((opcode & 0xfc00) === 0x2c00) {\r\n        /* MOV, 0010 11rd dddd rrrr */\r\n        cpu.data[(opcode & 0x1f0) >> 4] = cpu.data[(opcode & 0xf) | ((opcode & 0x200) >> 5)];\r\n    }\r\n    else if ((opcode & 0xff00) === 0x100) {\r\n        /* MOVW, 0000 0001 dddd rrrr */\r\n        const r2 = 2 * (opcode & 0xf);\r\n        const d2 = 2 * ((opcode & 0xf0) >> 4);\r\n        cpu.data[d2] = cpu.data[r2];\r\n        cpu.data[d2 + 1] = cpu.data[r2 + 1];\r\n    }\r\n    else if ((opcode & 0xfc00) === 0x9c00) {\r\n        /* MUL, 1001 11rd dddd rrrr */\r\n        const R = cpu.data[(opcode & 0x1f0) >> 4] * cpu.data[(opcode & 0xf) | ((opcode & 0x200) >> 5)];\r\n        cpu.dataView.setUint16(0, R, true);\r\n        cpu.data[95] = (cpu.data[95] & 0xfc) | (0xffff & R ? 0 : 2) | (0x8000 & R ? 1 : 0);\r\n        cpu.cycles++;\r\n    }\r\n    else if ((opcode & 0xff00) === 0x200) {\r\n        /* MULS, 0000 0010 dddd rrrr */\r\n        const R = cpu.dataView.getInt8(((opcode & 0xf0) >> 4) + 16) * cpu.dataView.getInt8((opcode & 0xf) + 16);\r\n        cpu.dataView.setInt16(0, R, true);\r\n        cpu.data[95] = (cpu.data[95] & 0xfc) | (0xffff & R ? 0 : 2) | (0x8000 & R ? 1 : 0);\r\n        cpu.cycles++;\r\n    }\r\n    else if ((opcode & 0xff88) === 0x300) {\r\n        /* MULSU, 0000 0011 0ddd 0rrr */\r\n        const R = cpu.dataView.getInt8(((opcode & 0x70) >> 4) + 16) * cpu.data[(opcode & 7) + 16];\r\n        cpu.dataView.setInt16(0, R, true);\r\n        cpu.data[95] = (cpu.data[95] & 0xfc) | (0xffff & R ? 0 : 2) | (0x8000 & R ? 1 : 0);\r\n        cpu.cycles++;\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x9401) {\r\n        /* NEG, 1001 010d dddd 0001 */\r\n        const d = (opcode & 0x1f0) >> 4;\r\n        const value = cpu.data[d];\r\n        const R = 0 - value;\r\n        cpu.data[d] = R;\r\n        let sreg = cpu.data[95] & 0xc0;\r\n        sreg |= R ? 0 : 2;\r\n        sreg |= 128 & R ? 4 : 0;\r\n        sreg |= 128 === R ? 8 : 0;\r\n        sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n        sreg |= R ? 1 : 0;\r\n        sreg |= 1 & (R | value) ? 0x20 : 0;\r\n        cpu.data[95] = sreg;\r\n    }\r\n    else if (opcode === 0) {\r\n        /* NOP, 0000 0000 0000 0000 */\r\n        /* NOP */\r\n    }\r\n    else if ((opcode & 0xfc00) === 0x2800) {\r\n        /* OR, 0010 10rd dddd rrrr */\r\n        const R = cpu.data[(opcode & 0x1f0) >> 4] | cpu.data[(opcode & 0xf) | ((opcode & 0x200) >> 5)];\r\n        cpu.data[(opcode & 0x1f0) >> 4] = R;\r\n        let sreg = cpu.data[95] & 0xe1;\r\n        sreg |= R ? 0 : 2;\r\n        sreg |= 128 & R ? 4 : 0;\r\n        sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n        cpu.data[95] = sreg;\r\n    }\r\n    else if ((opcode & 0xf000) === 0x6000) {\r\n        /* SBR, 0110 KKKK dddd KKKK */\r\n        const R = cpu.data[((opcode & 0xf0) >> 4) + 16] | ((opcode & 0xf) | ((opcode & 0xf00) >> 4));\r\n        cpu.data[((opcode & 0xf0) >> 4) + 16] = R;\r\n        let sreg = cpu.data[95] & 0xe1;\r\n        sreg |= R ? 0 : 2;\r\n        sreg |= 128 & R ? 4 : 0;\r\n        sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n        cpu.data[95] = sreg;\r\n    }\r\n    else if ((opcode & 0xf800) === 0xb800) {\r\n        /* OUT, 1011 1AAr rrrr AAAA */\r\n        cpu.writeData(((opcode & 0xf) | ((opcode & 0x600) >> 5)) + 32, cpu.data[(opcode & 0x1f0) >> 4]);\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x900f) {\r\n        /* POP, 1001 000d dddd 1111 */\r\n        const value = cpu.dataView.getUint16(93, true) + 1;\r\n        cpu.dataView.setUint16(93, value, true);\r\n        cpu.data[(opcode & 0x1f0) >> 4] = cpu.data[value];\r\n        cpu.cycles++;\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x920f) {\r\n        /* PUSH, 1001 001d dddd 1111 */\r\n        const value = cpu.dataView.getUint16(93, true);\r\n        cpu.data[value] = cpu.data[(opcode & 0x1f0) >> 4];\r\n        cpu.dataView.setUint16(93, value - 1, true);\r\n        cpu.cycles++;\r\n    }\r\n    else if ((opcode & 0xf000) === 0xd000) {\r\n        /* RCALL, 1101 kkkk kkkk kkkk */\r\n        const k = (opcode & 0x7ff) - (opcode & 0x800 ? 0x800 : 0);\r\n        const retAddr = cpu.pc + 1;\r\n        const sp = cpu.dataView.getUint16(93, true);\r\n        const { pc22Bits } = cpu;\r\n        cpu.data[sp] = 255 & retAddr;\r\n        cpu.data[sp - 1] = (retAddr >> 8) & 255;\r\n        if (pc22Bits) {\r\n            cpu.data[sp - 2] = (retAddr >> 16) & 255;\r\n        }\r\n        cpu.dataView.setUint16(93, sp - (pc22Bits ? 3 : 2), true);\r\n        cpu.pc += k;\r\n        cpu.cycles += pc22Bits ? 3 : 2;\r\n    }\r\n    else if (opcode === 0x9508) {\r\n        /* RET, 1001 0101 0000 1000 */\r\n        const { pc22Bits } = cpu;\r\n        const i = cpu.dataView.getUint16(93, true) + (pc22Bits ? 3 : 2);\r\n        cpu.dataView.setUint16(93, i, true);\r\n        cpu.pc = (cpu.data[i - 1] << 8) + cpu.data[i] - 1;\r\n        if (pc22Bits) {\r\n            cpu.pc |= cpu.data[i - 2] << 16;\r\n        }\r\n        cpu.cycles += pc22Bits ? 4 : 3;\r\n    }\r\n    else if (opcode === 0x9518) {\r\n        /* RETI, 1001 0101 0001 1000 */\r\n        const { pc22Bits } = cpu;\r\n        const i = cpu.dataView.getUint16(93, true) + (pc22Bits ? 3 : 2);\r\n        cpu.dataView.setUint16(93, i, true);\r\n        cpu.pc = (cpu.data[i - 1] << 8) + cpu.data[i] - 1;\r\n        if (pc22Bits) {\r\n            cpu.pc |= cpu.data[i - 2] << 16;\r\n        }\r\n        cpu.cycles += pc22Bits ? 4 : 3;\r\n        cpu.data[95] |= 0x80; // Enable interrupts\r\n    }\r\n    else if ((opcode & 0xf000) === 0xc000) {\r\n        /* RJMP, 1100 kkkk kkkk kkkk */\r\n        cpu.pc = cpu.pc + ((opcode & 0x7ff) - (opcode & 0x800 ? 0x800 : 0));\r\n        cpu.cycles++;\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x9407) {\r\n        /* ROR, 1001 010d dddd 0111 */\r\n        const d = cpu.data[(opcode & 0x1f0) >> 4];\r\n        const r = (d >>> 1) | ((cpu.data[95] & 1) << 7);\r\n        cpu.data[(opcode & 0x1f0) >> 4] = r;\r\n        let sreg = cpu.data[95] & 0xe0;\r\n        sreg |= r ? 0 : 2;\r\n        sreg |= 128 & r ? 4 : 0;\r\n        sreg |= 1 & d ? 1 : 0;\r\n        sreg |= ((sreg >> 2) & 1) ^ (sreg & 1) ? 8 : 0;\r\n        sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n        cpu.data[95] = sreg;\r\n    }\r\n    else if ((opcode & 0xfc00) === 0x800) {\r\n        /* SBC, 0000 10rd dddd rrrr */\r\n        const val1 = cpu.data[(opcode & 0x1f0) >> 4];\r\n        const val2 = cpu.data[(opcode & 0xf) | ((opcode & 0x200) >> 5)];\r\n        let sreg = cpu.data[95];\r\n        const R = val1 - val2 - (sreg & 1);\r\n        cpu.data[(opcode & 0x1f0) >> 4] = R;\r\n        sreg = (sreg & 0xc0) | (!R && (sreg >> 1) & 1 ? 2 : 0) | (val2 + (sreg & 1) > val1 ? 1 : 0);\r\n        sreg |= 128 & R ? 4 : 0;\r\n        sreg |= (val1 ^ val2) & (val1 ^ R) & 128 ? 8 : 0;\r\n        sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n        sreg |= 1 & ((~val1 & val2) | (val2 & R) | (R & ~val1)) ? 0x20 : 0;\r\n        cpu.data[95] = sreg;\r\n    }\r\n    else if ((opcode & 0xf000) === 0x4000) {\r\n        /* SBCI, 0100 KKKK dddd KKKK */\r\n        const val1 = cpu.data[((opcode & 0xf0) >> 4) + 16];\r\n        const val2 = (opcode & 0xf) | ((opcode & 0xf00) >> 4);\r\n        let sreg = cpu.data[95];\r\n        const R = val1 - val2 - (sreg & 1);\r\n        cpu.data[((opcode & 0xf0) >> 4) + 16] = R;\r\n        sreg = (sreg & 0xc0) | (!R && (sreg >> 1) & 1 ? 2 : 0) | (val2 + (sreg & 1) > val1 ? 1 : 0);\r\n        sreg |= 128 & R ? 4 : 0;\r\n        sreg |= (val1 ^ val2) & (val1 ^ R) & 128 ? 8 : 0;\r\n        sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n        sreg |= 1 & ((~val1 & val2) | (val2 & R) | (R & ~val1)) ? 0x20 : 0;\r\n        cpu.data[95] = sreg;\r\n    }\r\n    else if ((opcode & 0xff00) === 0x9a00) {\r\n        /* SBI, 1001 1010 AAAA Abbb */\r\n        const target = ((opcode & 0xf8) >> 3) + 32;\r\n        cpu.writeData(target, cpu.readData(target) | (1 << (opcode & 7)));\r\n        cpu.cycles++;\r\n    }\r\n    else if ((opcode & 0xff00) === 0x9900) {\r\n        /* SBIC, 1001 1001 AAAA Abbb */\r\n        const value = cpu.readData(((opcode & 0xf8) >> 3) + 32);\r\n        if (!(value & (1 << (opcode & 7)))) {\r\n            const nextOpcode = cpu.progMem[cpu.pc + 1];\r\n            const skipSize = isTwoWordInstruction(nextOpcode) ? 2 : 1;\r\n            cpu.cycles += skipSize;\r\n            cpu.pc += skipSize;\r\n        }\r\n    }\r\n    else if ((opcode & 0xff00) === 0x9b00) {\r\n        /* SBIS, 1001 1011 AAAA Abbb */\r\n        const value = cpu.readData(((opcode & 0xf8) >> 3) + 32);\r\n        if (value & (1 << (opcode & 7))) {\r\n            const nextOpcode = cpu.progMem[cpu.pc + 1];\r\n            const skipSize = isTwoWordInstruction(nextOpcode) ? 2 : 1;\r\n            cpu.cycles += skipSize;\r\n            cpu.pc += skipSize;\r\n        }\r\n    }\r\n    else if ((opcode & 0xff00) === 0x9700) {\r\n        /* SBIW, 1001 0111 KKdd KKKK */\r\n        const i = 2 * ((opcode & 0x30) >> 4) + 24;\r\n        const a = cpu.dataView.getUint16(i, true);\r\n        const l = (opcode & 0xf) | ((opcode & 0xc0) >> 2);\r\n        const R = a - l;\r\n        cpu.dataView.setUint16(i, R, true);\r\n        let sreg = cpu.data[95] & 0xc0;\r\n        sreg |= R ? 0 : 2;\r\n        sreg |= 0x8000 & R ? 4 : 0;\r\n        sreg |= a & ~R & 0x8000 ? 8 : 0;\r\n        sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n        sreg |= l > a ? 1 : 0;\r\n        sreg |= 1 & ((~a & l) | (l & R) | (R & ~a)) ? 0x20 : 0;\r\n        cpu.data[95] = sreg;\r\n        cpu.cycles++;\r\n    }\r\n    else if ((opcode & 0xfe08) === 0xfc00) {\r\n        /* SBRC, 1111 110r rrrr 0bbb */\r\n        if (!(cpu.data[(opcode & 0x1f0) >> 4] & (1 << (opcode & 7)))) {\r\n            const nextOpcode = cpu.progMem[cpu.pc + 1];\r\n            const skipSize = isTwoWordInstruction(nextOpcode) ? 2 : 1;\r\n            cpu.cycles += skipSize;\r\n            cpu.pc += skipSize;\r\n        }\r\n    }\r\n    else if ((opcode & 0xfe08) === 0xfe00) {\r\n        /* SBRS, 1111 111r rrrr 0bbb */\r\n        if (cpu.data[(opcode & 0x1f0) >> 4] & (1 << (opcode & 7))) {\r\n            const nextOpcode = cpu.progMem[cpu.pc + 1];\r\n            const skipSize = isTwoWordInstruction(nextOpcode) ? 2 : 1;\r\n            cpu.cycles += skipSize;\r\n            cpu.pc += skipSize;\r\n        }\r\n    }\r\n    else if (opcode === 0x9588) {\r\n        /* SLEEP, 1001 0101 1000 1000 */\r\n        /* not implemented */\r\n    }\r\n    else if (opcode === 0x95e8) {\r\n        /* SPM, 1001 0101 1110 1000 */\r\n        /* not implemented */\r\n    }\r\n    else if (opcode === 0x95f8) {\r\n        /* SPM(INC), 1001 0101 1111 1000 */\r\n        /* not implemented */\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x9200) {\r\n        /* STS, 1001 001d dddd 0000 kkkk kkkk kkkk kkkk */\r\n        const value = cpu.data[(opcode & 0x1f0) >> 4];\r\n        const addr = cpu.progMem[cpu.pc + 1];\r\n        cpu.writeData(addr, value);\r\n        cpu.pc++;\r\n        cpu.cycles++;\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x920c) {\r\n        /* STX, 1001 001r rrrr 1100 */\r\n        cpu.writeData(cpu.dataView.getUint16(26, true), cpu.data[(opcode & 0x1f0) >> 4]);\r\n        cpu.cycles++;\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x920d) {\r\n        /* STX(INC), 1001 001r rrrr 1101 */\r\n        const x = cpu.dataView.getUint16(26, true);\r\n        cpu.writeData(x, cpu.data[(opcode & 0x1f0) >> 4]);\r\n        cpu.dataView.setUint16(26, x + 1, true);\r\n        cpu.cycles++;\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x920e) {\r\n        /* STX(DEC), 1001 001r rrrr 1110 */\r\n        const i = cpu.data[(opcode & 0x1f0) >> 4];\r\n        const x = cpu.dataView.getUint16(26, true) - 1;\r\n        cpu.dataView.setUint16(26, x, true);\r\n        cpu.writeData(x, i);\r\n        cpu.cycles++;\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x8208) {\r\n        /* STY, 1000 001r rrrr 1000 */\r\n        cpu.writeData(cpu.dataView.getUint16(28, true), cpu.data[(opcode & 0x1f0) >> 4]);\r\n        cpu.cycles++;\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x9209) {\r\n        /* STY(INC), 1001 001r rrrr 1001 */\r\n        const i = cpu.data[(opcode & 0x1f0) >> 4];\r\n        const y = cpu.dataView.getUint16(28, true);\r\n        cpu.writeData(y, i);\r\n        cpu.dataView.setUint16(28, y + 1, true);\r\n        cpu.cycles++;\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x920a) {\r\n        /* STY(DEC), 1001 001r rrrr 1010 */\r\n        const i = cpu.data[(opcode & 0x1f0) >> 4];\r\n        const y = cpu.dataView.getUint16(28, true) - 1;\r\n        cpu.dataView.setUint16(28, y, true);\r\n        cpu.writeData(y, i);\r\n        cpu.cycles++;\r\n    }\r\n    else if ((opcode & 0xd208) === 0x8208 &&\r\n        (opcode & 7) | ((opcode & 0xc00) >> 7) | ((opcode & 0x2000) >> 8)) {\r\n        /* STDY, 10q0 qq1r rrrr 1qqq */\r\n        cpu.writeData(cpu.dataView.getUint16(28, true) +\r\n            ((opcode & 7) | ((opcode & 0xc00) >> 7) | ((opcode & 0x2000) >> 8)), cpu.data[(opcode & 0x1f0) >> 4]);\r\n        cpu.cycles++;\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x8200) {\r\n        /* STZ, 1000 001r rrrr 0000 */\r\n        cpu.writeData(cpu.dataView.getUint16(30, true), cpu.data[(opcode & 0x1f0) >> 4]);\r\n        cpu.cycles++;\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x9201) {\r\n        /* STZ(INC), 1001 001r rrrr 0001 */\r\n        const z = cpu.dataView.getUint16(30, true);\r\n        cpu.writeData(z, cpu.data[(opcode & 0x1f0) >> 4]);\r\n        cpu.dataView.setUint16(30, z + 1, true);\r\n        cpu.cycles++;\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x9202) {\r\n        /* STZ(DEC), 1001 001r rrrr 0010 */\r\n        const i = cpu.data[(opcode & 0x1f0) >> 4];\r\n        const z = cpu.dataView.getUint16(30, true) - 1;\r\n        cpu.dataView.setUint16(30, z, true);\r\n        cpu.writeData(z, i);\r\n        cpu.cycles++;\r\n    }\r\n    else if ((opcode & 0xd208) === 0x8200 &&\r\n        (opcode & 7) | ((opcode & 0xc00) >> 7) | ((opcode & 0x2000) >> 8)) {\r\n        /* STDZ, 10q0 qq1r rrrr 0qqq */\r\n        cpu.writeData(cpu.dataView.getUint16(30, true) +\r\n            ((opcode & 7) | ((opcode & 0xc00) >> 7) | ((opcode & 0x2000) >> 8)), cpu.data[(opcode & 0x1f0) >> 4]);\r\n        cpu.cycles++;\r\n    }\r\n    else if ((opcode & 0xfc00) === 0x1800) {\r\n        /* SUB, 0001 10rd dddd rrrr */\r\n        const val1 = cpu.data[(opcode & 0x1f0) >> 4];\r\n        const val2 = cpu.data[(opcode & 0xf) | ((opcode & 0x200) >> 5)];\r\n        const R = val1 - val2;\r\n        cpu.data[(opcode & 0x1f0) >> 4] = R;\r\n        let sreg = cpu.data[95] & 0xc0;\r\n        sreg |= R ? 0 : 2;\r\n        sreg |= 128 & R ? 4 : 0;\r\n        sreg |= (val1 ^ val2) & (val1 ^ R) & 128 ? 8 : 0;\r\n        sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n        sreg |= val2 > val1 ? 1 : 0;\r\n        sreg |= 1 & ((~val1 & val2) | (val2 & R) | (R & ~val1)) ? 0x20 : 0;\r\n        cpu.data[95] = sreg;\r\n    }\r\n    else if ((opcode & 0xf000) === 0x5000) {\r\n        /* SUBI, 0101 KKKK dddd KKKK */\r\n        const val1 = cpu.data[((opcode & 0xf0) >> 4) + 16];\r\n        const val2 = (opcode & 0xf) | ((opcode & 0xf00) >> 4);\r\n        const R = val1 - val2;\r\n        cpu.data[((opcode & 0xf0) >> 4) + 16] = R;\r\n        let sreg = cpu.data[95] & 0xc0;\r\n        sreg |= R ? 0 : 2;\r\n        sreg |= 128 & R ? 4 : 0;\r\n        sreg |= (val1 ^ val2) & (val1 ^ R) & 128 ? 8 : 0;\r\n        sreg |= ((sreg >> 2) & 1) ^ ((sreg >> 3) & 1) ? 0x10 : 0;\r\n        sreg |= val2 > val1 ? 1 : 0;\r\n        sreg |= 1 & ((~val1 & val2) | (val2 & R) | (R & ~val1)) ? 0x20 : 0;\r\n        cpu.data[95] = sreg;\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x9402) {\r\n        /* SWAP, 1001 010d dddd 0010 */\r\n        const d = (opcode & 0x1f0) >> 4;\r\n        const i = cpu.data[d];\r\n        cpu.data[d] = ((15 & i) << 4) | ((240 & i) >>> 4);\r\n    }\r\n    else if (opcode === 0x95a8) {\r\n        /* WDR, 1001 0101 1010 1000 */\r\n        /* not implemented */\r\n    }\r\n    else if ((opcode & 0xfe0f) === 0x9204) {\r\n        /* XCH, 1001 001r rrrr 0100 */\r\n        const r = (opcode & 0x1f0) >> 4;\r\n        const val1 = cpu.data[r];\r\n        const val2 = cpu.data[cpu.dataView.getUint16(30, true)];\r\n        cpu.data[cpu.dataView.getUint16(30, true)] = val1;\r\n        cpu.data[r] = val2;\r\n    }\r\n    cpu.pc = (cpu.pc + 1) % cpu.progMem.length;\r\n    cpu.cycles++;\r\n}\r\n","export const portAConfig = {\r\n    PIN: 0x20,\r\n    DDR: 0x21,\r\n    PORT: 0x22,\r\n};\r\nexport const portBConfig = {\r\n    PIN: 0x23,\r\n    DDR: 0x24,\r\n    PORT: 0x25,\r\n};\r\nexport const portCConfig = {\r\n    PIN: 0x26,\r\n    DDR: 0x27,\r\n    PORT: 0x28,\r\n};\r\nexport const portDConfig = {\r\n    PIN: 0x29,\r\n    DDR: 0x2a,\r\n    PORT: 0x2b,\r\n};\r\nexport const portEConfig = {\r\n    PIN: 0x2c,\r\n    DDR: 0x2d,\r\n    PORT: 0x2e,\r\n};\r\nexport const portFConfig = {\r\n    PIN: 0x2f,\r\n    DDR: 0x30,\r\n    PORT: 0x31,\r\n};\r\nexport const portGConfig = {\r\n    PIN: 0x32,\r\n    DDR: 0x33,\r\n    PORT: 0x34,\r\n};\r\nexport const portHConfig = {\r\n    PIN: 0x100,\r\n    DDR: 0x101,\r\n    PORT: 0x102,\r\n};\r\nexport const portJConfig = {\r\n    PIN: 0x103,\r\n    DDR: 0x104,\r\n    PORT: 0x105,\r\n};\r\nexport const portKConfig = {\r\n    PIN: 0x106,\r\n    DDR: 0x107,\r\n    PORT: 0x108,\r\n};\r\nexport const portLConfig = {\r\n    PIN: 0x109,\r\n    DDR: 0x10a,\r\n    PORT: 0x10b,\r\n};\r\nexport var PinState;\r\n(function (PinState) {\r\n    PinState[PinState[\"Low\"] = 0] = \"Low\";\r\n    PinState[PinState[\"High\"] = 1] = \"High\";\r\n    PinState[PinState[\"Input\"] = 2] = \"Input\";\r\n    PinState[PinState[\"InputPullUp\"] = 3] = \"InputPullUp\";\r\n})(PinState || (PinState = {}));\r\n/* This mechanism allows timers to override specific GPIO pins */\r\nexport var PinOverrideMode;\r\n(function (PinOverrideMode) {\r\n    PinOverrideMode[PinOverrideMode[\"None\"] = 0] = \"None\";\r\n    PinOverrideMode[PinOverrideMode[\"Enable\"] = 1] = \"Enable\";\r\n    PinOverrideMode[PinOverrideMode[\"Set\"] = 2] = \"Set\";\r\n    PinOverrideMode[PinOverrideMode[\"Clear\"] = 3] = \"Clear\";\r\n    PinOverrideMode[PinOverrideMode[\"Toggle\"] = 4] = \"Toggle\";\r\n})(PinOverrideMode || (PinOverrideMode = {}));\r\nexport class AVRIOPort {\r\n    constructor(cpu, portConfig) {\r\n        this.cpu = cpu;\r\n        this.portConfig = portConfig;\r\n        this.listeners = [];\r\n        this.pinValue = 0;\r\n        this.overrideMask = 0xff;\r\n        this.lastValue = 0;\r\n        this.lastDdr = 0;\r\n        cpu.writeHooks[portConfig.DDR] = (value) => {\r\n            const portValue = cpu.data[portConfig.PORT];\r\n            cpu.data[portConfig.DDR] = value;\r\n            this.updatePinRegister(portValue, value);\r\n            this.writeGpio(portValue, value);\r\n            return true;\r\n        };\r\n        cpu.writeHooks[portConfig.PORT] = (value) => {\r\n            const ddrMask = cpu.data[portConfig.DDR];\r\n            cpu.data[portConfig.PORT] = value;\r\n            this.updatePinRegister(value, ddrMask);\r\n            this.writeGpio(value, ddrMask);\r\n            return true;\r\n        };\r\n        cpu.writeHooks[portConfig.PIN] = (value) => {\r\n            // Writing to 1 PIN toggles PORT bits\r\n            const oldPortValue = cpu.data[portConfig.PORT];\r\n            const ddrMask = cpu.data[portConfig.DDR];\r\n            const portValue = oldPortValue ^ value;\r\n            cpu.data[portConfig.PORT] = portValue;\r\n            cpu.data[portConfig.PIN] = (cpu.data[portConfig.PIN] & ~ddrMask) | (portValue & ddrMask);\r\n            this.writeGpio(portValue, ddrMask);\r\n            return true;\r\n        };\r\n        // The following hook is used by the timer compare output to override GPIO pins:\r\n        cpu.gpioTimerHooks[portConfig.PORT] = (pin, mode) => {\r\n            const pinMask = 1 << pin;\r\n            if (mode == PinOverrideMode.None) {\r\n                this.overrideMask |= pinMask;\r\n            }\r\n            else {\r\n                this.overrideMask &= ~pinMask;\r\n                switch (mode) {\r\n                    case PinOverrideMode.Enable:\r\n                        this.overrideValue &= ~pinMask;\r\n                        this.overrideValue |= cpu.data[portConfig.PORT] & pinMask;\r\n                        break;\r\n                    case PinOverrideMode.Set:\r\n                        this.overrideValue |= pinMask;\r\n                        break;\r\n                    case PinOverrideMode.Clear:\r\n                        this.overrideValue &= ~pinMask;\r\n                        break;\r\n                    case PinOverrideMode.Toggle:\r\n                        this.overrideValue ^= pinMask;\r\n                        break;\r\n                }\r\n            }\r\n            this.writeGpio(cpu.data[portConfig.PORT], cpu.data[portConfig.DDR]);\r\n        };\r\n    }\r\n    addListener(listener) {\r\n        this.listeners.push(listener);\r\n    }\r\n    removeListener(listener) {\r\n        this.listeners = this.listeners.filter((l) => l !== listener);\r\n    }\r\n    /**\r\n     * Get the state of a given GPIO pin\r\n     *\r\n     * @param index Pin index to return from 0 to 7\r\n     * @returns PinState.Low or PinState.High if the pin is set to output, PinState.Input if the pin is set\r\n     *   to input, and PinState.InputPullUp if the pin is set to input and the internal pull-up resistor has\r\n     *   been enabled.\r\n     */\r\n    pinState(index) {\r\n        const ddr = this.cpu.data[this.portConfig.DDR];\r\n        const port = this.cpu.data[this.portConfig.PORT];\r\n        const bitMask = 1 << index;\r\n        if (ddr & bitMask) {\r\n            return this.lastValue & bitMask ? PinState.High : PinState.Low;\r\n        }\r\n        else {\r\n            return port & bitMask ? PinState.InputPullUp : PinState.Input;\r\n        }\r\n    }\r\n    /**\r\n     * Sets the input value for the given pin. This is the value that\r\n     * will be returned when reading from the PIN register.\r\n     */\r\n    setPin(index, value) {\r\n        const bitMask = 1 << index;\r\n        this.pinValue &= ~bitMask;\r\n        if (value) {\r\n            this.pinValue |= bitMask;\r\n        }\r\n        this.updatePinRegister(this.cpu.data[this.portConfig.PORT], this.cpu.data[this.portConfig.DDR]);\r\n    }\r\n    updatePinRegister(port, ddr) {\r\n        this.cpu.data[this.portConfig.PIN] = (this.pinValue & ~ddr) | (port & ddr);\r\n    }\r\n    writeGpio(value, ddr) {\r\n        const newValue = (((value & this.overrideMask) | this.overrideValue) & ddr) | (value & ~ddr);\r\n        const prevValue = this.lastValue;\r\n        if (newValue !== prevValue || ddr !== this.lastDdr) {\r\n            this.lastValue = newValue;\r\n            this.lastDdr = ddr;\r\n            for (const listener of this.listeners) {\r\n                listener(newValue, prevValue);\r\n            }\r\n        }\r\n    }\r\n}\r\n","/**\r\n * AVR-8 Timers\r\n * Part of AVR8js\r\n * Reference: http://ww1.microchip.com/downloads/en/DeviceDoc/ATmega48A-PA-88A-PA-168A-PA-328-P-DS-DS40002061A.pdf\r\n *\r\n * Copyright (C) 2019, 2020, Uri Shaked\r\n */\r\nimport { PinOverrideMode, portBConfig, portDConfig } from './gpio';\r\nconst timer01Dividers = {\r\n    0: 0,\r\n    1: 1,\r\n    2: 8,\r\n    3: 64,\r\n    4: 256,\r\n    5: 1024,\r\n    6: 0,\r\n    7: 0,\r\n};\r\n/** These are differnet for some devices (e.g. ATtiny85) */\r\nconst defaultTimerBits = {\r\n    // TIFR bits\r\n    TOV: 1,\r\n    OCFA: 2,\r\n    OCFB: 4,\r\n    // TIMSK bits\r\n    TOIE: 1,\r\n    OCIEA: 2,\r\n    OCIEB: 4,\r\n};\r\nexport const timer0Config = Object.assign({ bits: 8, captureInterrupt: 0, compAInterrupt: 0x1c, compBInterrupt: 0x1e, ovfInterrupt: 0x20, TIFR: 0x35, OCRA: 0x47, OCRB: 0x48, ICR: 0, TCNT: 0x46, TCCRA: 0x44, TCCRB: 0x45, TCCRC: 0, TIMSK: 0x6e, dividers: timer01Dividers, compPortA: portDConfig.PORT, compPinA: 6, compPortB: portDConfig.PORT, compPinB: 5 }, defaultTimerBits);\r\nexport const timer1Config = Object.assign({ bits: 16, captureInterrupt: 0x14, compAInterrupt: 0x16, compBInterrupt: 0x18, ovfInterrupt: 0x1a, TIFR: 0x36, OCRA: 0x88, OCRB: 0x8a, ICR: 0x86, TCNT: 0x84, TCCRA: 0x80, TCCRB: 0x81, TCCRC: 0x82, TIMSK: 0x6f, dividers: timer01Dividers, compPortA: portBConfig.PORT, compPinA: 1, compPortB: portBConfig.PORT, compPinB: 2 }, defaultTimerBits);\r\nexport const timer2Config = Object.assign({ bits: 8, captureInterrupt: 0, compAInterrupt: 0x0e, compBInterrupt: 0x10, ovfInterrupt: 0x12, TIFR: 0x37, OCRA: 0xb3, OCRB: 0xb4, ICR: 0, TCNT: 0xb2, TCCRA: 0xb0, TCCRB: 0xb1, TCCRC: 0, TIMSK: 0x70, dividers: {\r\n        0: 0,\r\n        1: 1,\r\n        2: 8,\r\n        3: 32,\r\n        4: 64,\r\n        5: 128,\r\n        6: 256,\r\n        7: 1024,\r\n    }, compPortA: portBConfig.PORT, compPinA: 3, compPortB: portDConfig.PORT, compPinB: 3 }, defaultTimerBits);\r\n/* All the following types and constants are related to WGM (Waveform Generation Mode) bits: */\r\nvar TimerMode;\r\n(function (TimerMode) {\r\n    TimerMode[TimerMode[\"Normal\"] = 0] = \"Normal\";\r\n    TimerMode[TimerMode[\"PWMPhaseCorrect\"] = 1] = \"PWMPhaseCorrect\";\r\n    TimerMode[TimerMode[\"CTC\"] = 2] = \"CTC\";\r\n    TimerMode[TimerMode[\"FastPWM\"] = 3] = \"FastPWM\";\r\n    TimerMode[TimerMode[\"PWMPhaseFrequencyCorrect\"] = 4] = \"PWMPhaseFrequencyCorrect\";\r\n    TimerMode[TimerMode[\"Reserved\"] = 5] = \"Reserved\";\r\n})(TimerMode || (TimerMode = {}));\r\nvar TOVUpdateMode;\r\n(function (TOVUpdateMode) {\r\n    TOVUpdateMode[TOVUpdateMode[\"Max\"] = 0] = \"Max\";\r\n    TOVUpdateMode[TOVUpdateMode[\"Top\"] = 1] = \"Top\";\r\n    TOVUpdateMode[TOVUpdateMode[\"Bottom\"] = 2] = \"Bottom\";\r\n})(TOVUpdateMode || (TOVUpdateMode = {}));\r\nvar OCRUpdateMode;\r\n(function (OCRUpdateMode) {\r\n    OCRUpdateMode[OCRUpdateMode[\"Immediate\"] = 0] = \"Immediate\";\r\n    OCRUpdateMode[OCRUpdateMode[\"Top\"] = 1] = \"Top\";\r\n    OCRUpdateMode[OCRUpdateMode[\"Bottom\"] = 2] = \"Bottom\";\r\n})(OCRUpdateMode || (OCRUpdateMode = {}));\r\nconst TopOCRA = 1;\r\nconst TopICR = 2;\r\n// Enable Toggle mode for OCxA in PWM Wave Generation mode\r\nconst OCToggle = 1;\r\nconst { Normal, PWMPhaseCorrect, CTC, FastPWM, Reserved, PWMPhaseFrequencyCorrect } = TimerMode;\r\nconst wgmModes8Bit = [\r\n    /*0*/ [Normal, 0xff, OCRUpdateMode.Immediate, TOVUpdateMode.Max, 0],\r\n    /*1*/ [PWMPhaseCorrect, 0xff, OCRUpdateMode.Top, TOVUpdateMode.Bottom, 0],\r\n    /*2*/ [CTC, TopOCRA, OCRUpdateMode.Immediate, TOVUpdateMode.Max, 0],\r\n    /*3*/ [FastPWM, 0xff, OCRUpdateMode.Bottom, TOVUpdateMode.Max, 0],\r\n    /*4*/ [Reserved, 0xff, OCRUpdateMode.Immediate, TOVUpdateMode.Max, 0],\r\n    /*5*/ [PWMPhaseCorrect, TopOCRA, OCRUpdateMode.Top, TOVUpdateMode.Bottom, OCToggle],\r\n    /*6*/ [Reserved, 0xff, OCRUpdateMode.Immediate, TOVUpdateMode.Max, 0],\r\n    /*7*/ [FastPWM, TopOCRA, OCRUpdateMode.Bottom, TOVUpdateMode.Top, OCToggle],\r\n];\r\n// Table 16-4 in the datasheet\r\nconst wgmModes16Bit = [\r\n    /*0 */ [Normal, 0xffff, OCRUpdateMode.Immediate, TOVUpdateMode.Max, 0],\r\n    /*1 */ [PWMPhaseCorrect, 0x00ff, OCRUpdateMode.Top, TOVUpdateMode.Bottom, 0],\r\n    /*2 */ [PWMPhaseCorrect, 0x01ff, OCRUpdateMode.Top, TOVUpdateMode.Bottom, 0],\r\n    /*3 */ [PWMPhaseCorrect, 0x03ff, OCRUpdateMode.Top, TOVUpdateMode.Bottom, 0],\r\n    /*4 */ [CTC, TopOCRA, OCRUpdateMode.Immediate, TOVUpdateMode.Max, 0],\r\n    /*5 */ [FastPWM, 0x00ff, OCRUpdateMode.Bottom, TOVUpdateMode.Top, 0],\r\n    /*6 */ [FastPWM, 0x01ff, OCRUpdateMode.Bottom, TOVUpdateMode.Top, 0],\r\n    /*7 */ [FastPWM, 0x03ff, OCRUpdateMode.Bottom, TOVUpdateMode.Top, 0],\r\n    /*8 */ [PWMPhaseFrequencyCorrect, TopICR, OCRUpdateMode.Bottom, TOVUpdateMode.Bottom, 0],\r\n    /*9 */ [PWMPhaseFrequencyCorrect, TopOCRA, OCRUpdateMode.Bottom, TOVUpdateMode.Bottom, OCToggle],\r\n    /*10*/ [PWMPhaseCorrect, TopICR, OCRUpdateMode.Top, TOVUpdateMode.Bottom, 0],\r\n    /*11*/ [PWMPhaseCorrect, TopOCRA, OCRUpdateMode.Top, TOVUpdateMode.Bottom, OCToggle],\r\n    /*12*/ [CTC, TopICR, OCRUpdateMode.Immediate, TOVUpdateMode.Max, 0],\r\n    /*13*/ [Reserved, 0xffff, OCRUpdateMode.Immediate, TOVUpdateMode.Max, 0],\r\n    /*14*/ [FastPWM, TopICR, OCRUpdateMode.Bottom, TOVUpdateMode.Top, OCToggle],\r\n    /*15*/ [FastPWM, TopOCRA, OCRUpdateMode.Bottom, TOVUpdateMode.Top, OCToggle],\r\n];\r\nfunction compToOverride(comp) {\r\n    switch (comp) {\r\n        case 1:\r\n            return PinOverrideMode.Toggle;\r\n        case 2:\r\n            return PinOverrideMode.Clear;\r\n        case 3:\r\n            return PinOverrideMode.Set;\r\n        default:\r\n            return PinOverrideMode.Enable;\r\n    }\r\n}\r\nexport class AVRTimer {\r\n    constructor(cpu, config) {\r\n        this.cpu = cpu;\r\n        this.config = config;\r\n        this.MAX = this.config.bits === 16 ? 0xffff : 0xff;\r\n        this.lastCycle = 0;\r\n        this.ocrA = 0;\r\n        this.nextOcrA = 0;\r\n        this.ocrB = 0;\r\n        this.nextOcrB = 0;\r\n        this.ocrUpdateMode = OCRUpdateMode.Immediate;\r\n        this.tovUpdateMode = TOVUpdateMode.Max;\r\n        this.icr = 0; // only for 16-bit timers\r\n        this.tcnt = 0;\r\n        this.tcntNext = 0;\r\n        this.tcntUpdated = false;\r\n        this.updateDivider = false;\r\n        this.countingUp = true;\r\n        this.divider = 0;\r\n        // This is the temporary register used to access 16-bit registers (section 16.3 of the datasheet)\r\n        this.highByteTemp = 0;\r\n        // Interrupts\r\n        this.OVF = {\r\n            address: this.config.ovfInterrupt,\r\n            flagRegister: this.config.TIFR,\r\n            flagMask: this.config.TOV,\r\n            enableRegister: this.config.TIMSK,\r\n            enableMask: this.config.TOIE,\r\n        };\r\n        this.OCFA = {\r\n            address: this.config.compAInterrupt,\r\n            flagRegister: this.config.TIFR,\r\n            flagMask: this.config.OCFA,\r\n            enableRegister: this.config.TIMSK,\r\n            enableMask: this.config.OCIEA,\r\n        };\r\n        this.OCFB = {\r\n            address: this.config.compBInterrupt,\r\n            flagRegister: this.config.TIFR,\r\n            flagMask: this.config.OCFB,\r\n            enableRegister: this.config.TIMSK,\r\n            enableMask: this.config.OCIEB,\r\n        };\r\n        this.count = (reschedule = true) => {\r\n            const { divider, lastCycle, cpu } = this;\r\n            const { cycles } = cpu;\r\n            const delta = cycles - lastCycle;\r\n            if (divider && delta >= divider) {\r\n                const counterDelta = Math.floor(delta / divider);\r\n                this.lastCycle += counterDelta * divider;\r\n                const val = this.tcnt;\r\n                const { timerMode, TOP } = this;\r\n                const phasePwm = timerMode === PWMPhaseCorrect || timerMode === PWMPhaseFrequencyCorrect;\r\n                const newVal = phasePwm\r\n                    ? this.phasePwmCount(val, counterDelta)\r\n                    : (val + counterDelta) % (TOP + 1);\r\n                const overflow = val + counterDelta > TOP;\r\n                // A CPU write overrides (has priority over) all counter clear or count operations.\r\n                if (!this.tcntUpdated) {\r\n                    this.tcnt = newVal;\r\n                    if (!phasePwm) {\r\n                        this.timerUpdated(newVal, val);\r\n                    }\r\n                }\r\n                if (!phasePwm) {\r\n                    if (timerMode === FastPWM && overflow) {\r\n                        const { compA, compB } = this;\r\n                        if (compA) {\r\n                            this.updateCompPin(compA, 'A', true);\r\n                        }\r\n                        if (compB) {\r\n                            this.updateCompPin(compB, 'B', true);\r\n                        }\r\n                    }\r\n                    if (this.ocrUpdateMode == OCRUpdateMode.Bottom && overflow) {\r\n                        // OCRUpdateMode.Top only occurs in Phase Correct modes, handled by phasePwmCount()\r\n                        this.ocrA = this.nextOcrA;\r\n                        this.ocrB = this.nextOcrB;\r\n                    }\r\n                    // OCRUpdateMode.Bottom only occurs in Phase Correct modes, handled by phasePwmCount().\r\n                    // Thus we only handle TOVUpdateMode.Top or TOVUpdateMode.Max here.\r\n                    if (overflow && (this.tovUpdateMode == TOVUpdateMode.Top || TOP === this.MAX)) {\r\n                        cpu.setInterruptFlag(this.OVF);\r\n                    }\r\n                }\r\n            }\r\n            if (this.tcntUpdated) {\r\n                this.tcnt = this.tcntNext;\r\n                this.tcntUpdated = false;\r\n            }\r\n            if (this.updateDivider) {\r\n                const newDivider = this.config.dividers[this.CS];\r\n                this.lastCycle = newDivider ? this.cpu.cycles : 0;\r\n                this.updateDivider = false;\r\n                this.divider = newDivider;\r\n                if (newDivider) {\r\n                    cpu.addClockEvent(this.count, this.lastCycle + newDivider - cpu.cycles);\r\n                }\r\n                return;\r\n            }\r\n            if (reschedule && divider) {\r\n                cpu.addClockEvent(this.count, this.lastCycle + divider - cpu.cycles);\r\n            }\r\n        };\r\n        this.updateWGMConfig();\r\n        this.cpu.readHooks[config.TCNT] = (addr) => {\r\n            this.count(false);\r\n            if (this.config.bits === 16) {\r\n                this.cpu.data[addr + 1] = this.tcnt >> 8;\r\n            }\r\n            return (this.cpu.data[addr] = this.tcnt & 0xff);\r\n        };\r\n        this.cpu.writeHooks[config.TCNT] = (value) => {\r\n            this.tcntNext = (this.highByteTemp << 8) | value;\r\n            this.countingUp = true;\r\n            this.tcntUpdated = true;\r\n            this.cpu.updateClockEvent(this.count, 0);\r\n            if (this.divider) {\r\n                this.timerUpdated(this.tcntNext, this.tcntNext);\r\n            }\r\n        };\r\n        this.cpu.writeHooks[config.OCRA] = (value) => {\r\n            this.nextOcrA = (this.highByteTemp << 8) | value;\r\n            if (this.ocrUpdateMode === OCRUpdateMode.Immediate) {\r\n                this.ocrA = this.nextOcrA;\r\n            }\r\n        };\r\n        this.cpu.writeHooks[config.OCRB] = (value) => {\r\n            this.nextOcrB = (this.highByteTemp << 8) | value;\r\n            if (this.ocrUpdateMode === OCRUpdateMode.Immediate) {\r\n                this.ocrB = this.nextOcrB;\r\n            }\r\n        };\r\n        this.cpu.writeHooks[config.ICR] = (value) => {\r\n            this.icr = (this.highByteTemp << 8) | value;\r\n        };\r\n        if (this.config.bits === 16) {\r\n            const updateTempRegister = (value) => {\r\n                this.highByteTemp = value;\r\n            };\r\n            this.cpu.writeHooks[config.TCNT + 1] = updateTempRegister;\r\n            this.cpu.writeHooks[config.OCRA + 1] = updateTempRegister;\r\n            this.cpu.writeHooks[config.OCRB + 1] = updateTempRegister;\r\n            this.cpu.writeHooks[config.ICR + 1] = updateTempRegister;\r\n        }\r\n        cpu.writeHooks[config.TCCRA] = (value) => {\r\n            this.cpu.data[config.TCCRA] = value;\r\n            this.updateWGMConfig();\r\n            return true;\r\n        };\r\n        cpu.writeHooks[config.TCCRB] = (value) => {\r\n            this.cpu.data[config.TCCRB] = value;\r\n            this.updateDivider = true;\r\n            this.cpu.clearClockEvent(this.count);\r\n            this.cpu.addClockEvent(this.count, 0);\r\n            this.updateWGMConfig();\r\n            return true;\r\n        };\r\n        cpu.writeHooks[config.TIFR] = (value) => {\r\n            this.cpu.data[config.TIFR] = value;\r\n            this.cpu.clearInterruptByFlag(this.OVF, value);\r\n            this.cpu.clearInterruptByFlag(this.OCFA, value);\r\n            this.cpu.clearInterruptByFlag(this.OCFB, value);\r\n            return true;\r\n        };\r\n        cpu.writeHooks[config.TIMSK] = (value) => {\r\n            this.cpu.updateInterruptEnable(this.OVF, value);\r\n            this.cpu.updateInterruptEnable(this.OCFA, value);\r\n            this.cpu.updateInterruptEnable(this.OCFB, value);\r\n        };\r\n    }\r\n    reset() {\r\n        this.divider = 0;\r\n        this.lastCycle = 0;\r\n        this.ocrA = 0;\r\n        this.nextOcrA = 0;\r\n        this.ocrB = 0;\r\n        this.nextOcrB = 0;\r\n        this.icr = 0;\r\n        this.tcnt = 0;\r\n        this.tcntNext = 0;\r\n        this.tcntUpdated = false;\r\n        this.countingUp = false;\r\n        this.updateDivider = true;\r\n    }\r\n    get TCCRA() {\r\n        return this.cpu.data[this.config.TCCRA];\r\n    }\r\n    get TCCRB() {\r\n        return this.cpu.data[this.config.TCCRB];\r\n    }\r\n    get TIMSK() {\r\n        return this.cpu.data[this.config.TIMSK];\r\n    }\r\n    get CS() {\r\n        return (this.TCCRB & 0x7);\r\n    }\r\n    get WGM() {\r\n        const mask = this.config.bits === 16 ? 0x18 : 0x8;\r\n        return ((this.TCCRB & mask) >> 1) | (this.TCCRA & 0x3);\r\n    }\r\n    get TOP() {\r\n        switch (this.topValue) {\r\n            case TopOCRA:\r\n                return this.ocrA;\r\n            case TopICR:\r\n                return this.icr;\r\n            default:\r\n                return this.topValue;\r\n        }\r\n    }\r\n    updateWGMConfig() {\r\n        const { config, WGM } = this;\r\n        const wgmModes = config.bits === 16 ? wgmModes16Bit : wgmModes8Bit;\r\n        const TCCRA = this.cpu.data[config.TCCRA];\r\n        const [timerMode, topValue, ocrUpdateMode, tovUpdateMode, flags] = wgmModes[WGM];\r\n        this.timerMode = timerMode;\r\n        this.topValue = topValue;\r\n        this.ocrUpdateMode = ocrUpdateMode;\r\n        this.tovUpdateMode = tovUpdateMode;\r\n        const pwmMode = timerMode === FastPWM ||\r\n            timerMode === PWMPhaseCorrect ||\r\n            timerMode === PWMPhaseFrequencyCorrect;\r\n        const prevCompA = this.compA;\r\n        this.compA = ((TCCRA >> 6) & 0x3);\r\n        if (this.compA === 1 && pwmMode && !(flags & OCToggle)) {\r\n            this.compA = 0;\r\n        }\r\n        if (!!prevCompA !== !!this.compA) {\r\n            this.updateCompA(this.compA ? PinOverrideMode.Enable : PinOverrideMode.None);\r\n        }\r\n        const prevCompB = this.compB;\r\n        this.compB = ((TCCRA >> 4) & 0x3);\r\n        if (this.compB === 1 && pwmMode) {\r\n            this.compB = 0; // Reserved, according to the datasheet\r\n        }\r\n        if (!!prevCompB !== !!this.compB) {\r\n            this.updateCompB(this.compB ? PinOverrideMode.Enable : PinOverrideMode.None);\r\n        }\r\n    }\r\n    phasePwmCount(value, delta) {\r\n        const { ocrA, ocrB, TOP, tcntUpdated } = this;\r\n        while (delta > 0) {\r\n            if (this.countingUp) {\r\n                value++;\r\n                if (value === TOP && !tcntUpdated) {\r\n                    this.countingUp = false;\r\n                    if (this.ocrUpdateMode === OCRUpdateMode.Top) {\r\n                        this.ocrA = this.nextOcrA;\r\n                        this.ocrB = this.nextOcrB;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                value--;\r\n                if (!value && !tcntUpdated) {\r\n                    this.countingUp = true;\r\n                    this.cpu.setInterruptFlag(this.OVF);\r\n                    if (this.ocrUpdateMode === OCRUpdateMode.Bottom) {\r\n                        this.ocrA = this.nextOcrA;\r\n                        this.ocrB = this.nextOcrB;\r\n                    }\r\n                }\r\n            }\r\n            if (!tcntUpdated && value === ocrA) {\r\n                this.cpu.setInterruptFlag(this.OCFA);\r\n                if (this.compA) {\r\n                    this.updateCompPin(this.compA, 'A');\r\n                }\r\n            }\r\n            if (!tcntUpdated && value === ocrB) {\r\n                this.cpu.setInterruptFlag(this.OCFB);\r\n                if (this.compB) {\r\n                    this.updateCompPin(this.compB, 'B');\r\n                }\r\n            }\r\n            delta--;\r\n        }\r\n        return value;\r\n    }\r\n    timerUpdated(value, prevValue) {\r\n        const { ocrA, ocrB } = this;\r\n        const overflow = prevValue > value;\r\n        if ((prevValue < ocrA || overflow) && value >= ocrA) {\r\n            this.cpu.setInterruptFlag(this.OCFA);\r\n            if (this.compA) {\r\n                this.updateCompPin(this.compA, 'A');\r\n            }\r\n        }\r\n        if ((prevValue < ocrB || overflow) && value >= ocrB) {\r\n            this.cpu.setInterruptFlag(this.OCFB);\r\n            if (this.compB) {\r\n                this.updateCompPin(this.compB, 'B');\r\n            }\r\n        }\r\n    }\r\n    updateCompPin(compValue, pinName, bottom = false) {\r\n        let newValue = PinOverrideMode.None;\r\n        const invertingMode = compValue === 3;\r\n        const isSet = this.countingUp === invertingMode;\r\n        switch (this.timerMode) {\r\n            case Normal:\r\n            case CTC:\r\n                newValue = compToOverride(compValue);\r\n                break;\r\n            case FastPWM:\r\n                if (compValue === 1) {\r\n                    newValue = bottom ? PinOverrideMode.None : PinOverrideMode.Toggle;\r\n                }\r\n                else {\r\n                    newValue = invertingMode !== bottom ? PinOverrideMode.Set : PinOverrideMode.Clear;\r\n                }\r\n                break;\r\n            case PWMPhaseCorrect:\r\n            case PWMPhaseFrequencyCorrect:\r\n                if (compValue === 1) {\r\n                    newValue = PinOverrideMode.Toggle;\r\n                }\r\n                else {\r\n                    newValue = isSet ? PinOverrideMode.Set : PinOverrideMode.Clear;\r\n                }\r\n                break;\r\n        }\r\n        if (newValue !== PinOverrideMode.None) {\r\n            if (pinName === 'A') {\r\n                this.updateCompA(newValue);\r\n            }\r\n            else {\r\n                this.updateCompB(newValue);\r\n            }\r\n        }\r\n    }\r\n    updateCompA(value) {\r\n        const { compPortA, compPinA } = this.config;\r\n        const hook = this.cpu.gpioTimerHooks[compPortA];\r\n        if (hook) {\r\n            hook(compPinA, value, compPortA);\r\n        }\r\n    }\r\n    updateCompB(value) {\r\n        const { compPortB, compPinB } = this.config;\r\n        const hook = this.cpu.gpioTimerHooks[compPortB];\r\n        if (hook) {\r\n            hook(compPinB, value, compPortB);\r\n        }\r\n    }\r\n}\r\n","/**\r\n * AVR-8 USART Peripheral\r\n * Part of AVR8js\r\n * Reference: http://ww1.microchip.com/downloads/en/DeviceDoc/ATmega48A-PA-88A-PA-168A-PA-328-P-DS-DS40002061A.pdf\r\n *\r\n * Copyright (C) 2019, 2020, Uri Shaked\r\n */\r\nexport const usart0Config = {\r\n    rxCompleteInterrupt: 0x24,\r\n    dataRegisterEmptyInterrupt: 0x26,\r\n    txCompleteInterrupt: 0x28,\r\n    UCSRA: 0xc0,\r\n    UCSRB: 0xc1,\r\n    UCSRC: 0xc2,\r\n    UBRRL: 0xc4,\r\n    UBRRH: 0xc5,\r\n    UDR: 0xc6,\r\n};\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\n// Register bits:\r\nconst UCSRA_RXC = 0x80; // USART Receive Complete\r\nconst UCSRA_TXC = 0x40; // USART Transmit Complete\r\nconst UCSRA_UDRE = 0x20; // USART Data Register Empty\r\nconst UCSRA_FE = 0x10; // Frame Error\r\nconst UCSRA_DOR = 0x8; // Data OverRun\r\nconst UCSRA_UPE = 0x4; // USART Parity Error\r\nconst UCSRA_U2X = 0x2; // Double the USART Transmission Speed\r\nconst UCSRA_MPCM = 0x1; // Multi-processor Communication Mode\r\nconst UCSRB_RXCIE = 0x80; // RX Complete Interrupt Enable\r\nconst UCSRB_TXCIE = 0x40; // TX Complete Interrupt Enable\r\nconst UCSRB_UDRIE = 0x20; // USART Data Register Empty Interrupt Enable\r\nconst UCSRB_RXEN = 0x10; // Receiver Enable\r\nconst UCSRB_TXEN = 0x8; // Transmitter Enable\r\nconst UCSRB_UCSZ2 = 0x4; // Character Size 2\r\nconst UCSRB_RXB8 = 0x2; // Receive Data Bit 8\r\nconst UCSRB_TXB8 = 0x1; // Transmit Data Bit 8\r\nconst UCSRC_UMSEL1 = 0x80; // USART Mode Select 1\r\nconst UCSRC_UMSEL0 = 0x40; // USART Mode Select 0\r\nconst UCSRC_UPM1 = 0x20; // Parity Mode 1\r\nconst UCSRC_UPM0 = 0x10; // Parity Mode 0\r\nconst UCSRC_USBS = 0x8; // Stop Bit Select\r\nconst UCSRC_UCSZ1 = 0x4; // Character Size 1\r\nconst UCSRC_UCSZ0 = 0x2; // Character Size 0\r\nconst UCSRC_UCPOL = 0x1; // Clock Polarity\r\n/* eslint-enable @typescript-eslint/no-unused-vars */\r\nconst rxMasks = {\r\n    5: 0x1f,\r\n    6: 0x3f,\r\n    7: 0x7f,\r\n    8: 0xff,\r\n    9: 0xff,\r\n};\r\nexport class AVRUSART {\r\n    constructor(cpu, config, freqHz) {\r\n        this.cpu = cpu;\r\n        this.config = config;\r\n        this.freqHz = freqHz;\r\n        this.onByteTransmit = null;\r\n        this.onLineTransmit = null;\r\n        this.onRxComplete = null;\r\n        this.rxBusyValue = false;\r\n        this.rxByte = 0;\r\n        this.lineBuffer = '';\r\n        // Interrupts\r\n        this.RXC = {\r\n            address: this.config.rxCompleteInterrupt,\r\n            flagRegister: this.config.UCSRA,\r\n            flagMask: UCSRA_RXC,\r\n            enableRegister: this.config.UCSRB,\r\n            enableMask: UCSRB_RXCIE,\r\n            constant: true,\r\n        };\r\n        this.UDRE = {\r\n            address: this.config.dataRegisterEmptyInterrupt,\r\n            flagRegister: this.config.UCSRA,\r\n            flagMask: UCSRA_UDRE,\r\n            enableRegister: this.config.UCSRB,\r\n            enableMask: UCSRB_UDRIE,\r\n        };\r\n        this.TXC = {\r\n            address: this.config.txCompleteInterrupt,\r\n            flagRegister: this.config.UCSRA,\r\n            flagMask: UCSRA_TXC,\r\n            enableRegister: this.config.UCSRB,\r\n            enableMask: UCSRB_TXCIE,\r\n        };\r\n        this.reset();\r\n        this.cpu.writeHooks[config.UCSRA] = (value) => {\r\n            cpu.data[config.UCSRA] = value & (UCSRA_MPCM | UCSRA_U2X);\r\n            cpu.clearInterruptByFlag(this.TXC, value);\r\n            return true;\r\n        };\r\n        this.cpu.writeHooks[config.UCSRB] = (value, oldValue) => {\r\n            cpu.updateInterruptEnable(this.RXC, value);\r\n            cpu.updateInterruptEnable(this.UDRE, value);\r\n            cpu.updateInterruptEnable(this.TXC, value);\r\n            if (value & UCSRB_RXEN && oldValue & UCSRB_RXEN) {\r\n                cpu.clearInterrupt(this.RXC);\r\n            }\r\n            if (value & UCSRB_TXEN && !(oldValue & UCSRB_TXEN)) {\r\n                // Enabling the transmission - mark UDR as empty\r\n                cpu.setInterruptFlag(this.UDRE);\r\n            }\r\n        };\r\n        this.cpu.readHooks[config.UDR] = () => {\r\n            var _a;\r\n            const mask = (_a = rxMasks[this.bitsPerChar]) !== null && _a !== void 0 ? _a : 0xff;\r\n            const result = this.rxByte & mask;\r\n            this.rxByte = 0;\r\n            this.cpu.clearInterrupt(this.RXC);\r\n            return result;\r\n        };\r\n        this.cpu.writeHooks[config.UDR] = (value) => {\r\n            if (this.onByteTransmit) {\r\n                this.onByteTransmit(value);\r\n            }\r\n            if (this.onLineTransmit) {\r\n                const ch = String.fromCharCode(value);\r\n                if (ch === '\\n') {\r\n                    this.onLineTransmit(this.lineBuffer);\r\n                    this.lineBuffer = '';\r\n                }\r\n                else {\r\n                    this.lineBuffer += ch;\r\n                }\r\n            }\r\n            this.cpu.addClockEvent(() => {\r\n                cpu.setInterruptFlag(this.UDRE);\r\n                cpu.setInterruptFlag(this.TXC);\r\n            }, this.cyclesPerChar);\r\n            this.cpu.clearInterrupt(this.TXC);\r\n            this.cpu.clearInterrupt(this.UDRE);\r\n        };\r\n    }\r\n    reset() {\r\n        this.cpu.data[this.config.UCSRA] = UCSRA_UDRE;\r\n        this.cpu.data[this.config.UCSRB] = 0;\r\n        this.cpu.data[this.config.UCSRC] = UCSRC_UCSZ1 | UCSRC_UCSZ0; // default: 8 bits per byte\r\n        this.rxBusyValue = false;\r\n        this.rxByte = 0;\r\n        this.lineBuffer = '';\r\n    }\r\n    get rxBusy() {\r\n        return this.rxBusyValue;\r\n    }\r\n    writeByte(value) {\r\n        const { cpu, config } = this;\r\n        if (this.rxBusyValue || !(cpu.data[config.UCSRB] & UCSRB_RXEN)) {\r\n            return false;\r\n        }\r\n        this.rxBusyValue = true;\r\n        cpu.addClockEvent(() => {\r\n            var _a;\r\n            this.rxByte = value;\r\n            this.rxBusyValue = false;\r\n            cpu.setInterruptFlag(this.RXC);\r\n            (_a = this.onRxComplete) === null || _a === void 0 ? void 0 : _a.call(this);\r\n        }, this.cyclesPerChar);\r\n        return true;\r\n    }\r\n    get cyclesPerChar() {\r\n        const symbolsPerChar = 1 + this.bitsPerChar + this.stopBits + (this.parityEnabled ? 1 : 0);\r\n        return (this.UBRR * this.multiplier + 1) * symbolsPerChar;\r\n    }\r\n    get UBRR() {\r\n        return (this.cpu.data[this.config.UBRRH] << 8) | this.cpu.data[this.config.UBRRL];\r\n    }\r\n    get multiplier() {\r\n        return this.cpu.data[this.config.UCSRA] & UCSRA_U2X ? 8 : 16;\r\n    }\r\n    get baudRate() {\r\n        return Math.floor(this.freqHz / (this.multiplier * (1 + this.UBRR)));\r\n    }\r\n    get bitsPerChar() {\r\n        const ucsz = ((this.cpu.data[this.config.UCSRC] & (UCSRC_UCSZ1 | UCSRC_UCSZ0)) >> 1) |\r\n            (this.cpu.data[this.config.UCSRB] & UCSRB_UCSZ2);\r\n        switch (ucsz) {\r\n            case 0:\r\n                return 5;\r\n            case 1:\r\n                return 6;\r\n            case 2:\r\n                return 7;\r\n            case 3:\r\n                return 8;\r\n            default: // 4..6 are reserved\r\n            case 7:\r\n                return 9;\r\n        }\r\n    }\r\n    get stopBits() {\r\n        return this.cpu.data[this.config.UCSRC] & UCSRC_USBS ? 2 : 1;\r\n    }\r\n    get parityEnabled() {\r\n        return this.cpu.data[this.config.UCSRC] & UCSRC_UPM1 ? true : false;\r\n    }\r\n    get parityOdd() {\r\n        return this.cpu.data[this.config.UCSRC] & UCSRC_UPM0 ? true : false;\r\n    }\r\n}\r\n","export class EEPROMMemoryBackend {\r\n    constructor(size) {\r\n        this.memory = new Uint8Array(size);\r\n        this.memory.fill(0xff);\r\n    }\r\n    readMemory(addr) {\r\n        return this.memory[addr];\r\n    }\r\n    writeMemory(addr, value) {\r\n        this.memory[addr] &= value;\r\n    }\r\n    eraseMemory(addr) {\r\n        this.memory[addr] = 0xff;\r\n    }\r\n}\r\nexport const eepromConfig = {\r\n    eepromReadyInterrupt: 0x2c,\r\n    EECR: 0x3f,\r\n    EEDR: 0x40,\r\n    EEARL: 0x41,\r\n    EEARH: 0x42,\r\n    eraseCycles: 28800,\r\n    writeCycles: 28800,\r\n};\r\nconst EERE = 1 << 0;\r\nconst EEPE = 1 << 1;\r\nconst EEMPE = 1 << 2;\r\nconst EERIE = 1 << 3;\r\nconst EEPM0 = 1 << 4;\r\nconst EEPM1 = 1 << 5;\r\nexport class AVREEPROM {\r\n    constructor(cpu, backend, config = eepromConfig) {\r\n        this.cpu = cpu;\r\n        this.backend = backend;\r\n        this.config = config;\r\n        /**\r\n         * Used to keep track on the last write to EEMPE. From the datasheet:\r\n         * The EEMPE bit determines whether setting EEPE to one causes the EEPROM to be written.\r\n         * When EEMPE is set, setting EEPE within four clock cycles will write data to the EEPROM\r\n         * at the selected address If EEMPE is zero, setting EEPE will have no effect.\r\n         */\r\n        this.writeEnabledCycles = 0;\r\n        this.writeCompleteCycles = 0;\r\n        // Interrupts\r\n        this.EER = {\r\n            address: this.config.eepromReadyInterrupt,\r\n            flagRegister: this.config.EECR,\r\n            flagMask: EEPE,\r\n            enableRegister: this.config.EECR,\r\n            enableMask: EERIE,\r\n            constant: true,\r\n            inverseFlag: true,\r\n        };\r\n        this.cpu.writeHooks[this.config.EECR] = (eecr) => {\r\n            const { EEARH, EEARL, EECR, EEDR } = this.config;\r\n            const addr = (this.cpu.data[EEARH] << 8) | this.cpu.data[EEARL];\r\n            if (eecr & EERE) {\r\n                this.cpu.clearInterrupt(this.EER);\r\n            }\r\n            if (eecr & EEMPE) {\r\n                const eempeCycles = 4;\r\n                this.writeEnabledCycles = this.cpu.cycles + eempeCycles;\r\n                this.cpu.addClockEvent(() => {\r\n                    this.cpu.data[EECR] &= ~EEMPE;\r\n                }, eempeCycles);\r\n            }\r\n            // Read\r\n            if (eecr & EERE) {\r\n                this.cpu.data[EEDR] = this.backend.readMemory(addr);\r\n                // When the EEPROM is read, the CPU is halted for four cycles before the\r\n                // next instruction is executed.\r\n                this.cpu.cycles += 4;\r\n                return true;\r\n            }\r\n            // Write\r\n            if (eecr & EEPE) {\r\n                //  If EEMPE is zero, setting EEPE will have no effect.\r\n                if (this.cpu.cycles >= this.writeEnabledCycles) {\r\n                    return true;\r\n                }\r\n                // Check for write-in-progress\r\n                if (this.cpu.cycles < this.writeCompleteCycles) {\r\n                    return true;\r\n                }\r\n                const eedr = this.cpu.data[EEDR];\r\n                this.writeCompleteCycles = this.cpu.cycles;\r\n                // Erase\r\n                if (!(eecr & EEPM1)) {\r\n                    this.backend.eraseMemory(addr);\r\n                    this.writeCompleteCycles += this.config.eraseCycles;\r\n                }\r\n                // Write\r\n                if (!(eecr & EEPM0)) {\r\n                    this.backend.writeMemory(addr, eedr);\r\n                    this.writeCompleteCycles += this.config.writeCycles;\r\n                }\r\n                this.cpu.data[EECR] |= EEPE;\r\n                this.cpu.addClockEvent(() => {\r\n                    this.cpu.setInterruptFlag(this.EER);\r\n                }, this.writeCompleteCycles - this.cpu.cycles);\r\n                // When EEPE has been set, the CPU is halted for two cycles before the\r\n                // next instruction is executed.\r\n                this.cpu.cycles += 2;\r\n                return true;\r\n            }\r\n            return false;\r\n        };\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-unused-vars */\r\n// Register bits:\r\nconst TWCR_TWINT = 0x80; // TWI Interrupt Flag\r\nconst TWCR_TWEA = 0x40; // TWI Enable Acknowledge Bit\r\nconst TWCR_TWSTA = 0x20; // TWI START Condition Bit\r\nconst TWCR_TWSTO = 0x10; // TWI STOP Condition Bit\r\nconst TWCR_TWWC = 0x8; //TWI Write Collision Flag\r\nconst TWCR_TWEN = 0x4; //  TWI Enable Bit\r\nconst TWCR_TWIE = 0x1; // TWI Interrupt Enable\r\nconst TWSR_TWS_MASK = 0xf8; // TWI Status\r\nconst TWSR_TWPS1 = 0x2; // TWI Prescaler Bits\r\nconst TWSR_TWPS0 = 0x1; // TWI Prescaler Bits\r\nconst TWSR_TWPS_MASK = TWSR_TWPS1 | TWSR_TWPS0; // TWI Prescaler mask\r\nconst TWAR_TWA_MASK = 0xfe; //  TWI (Slave) Address Register\r\nconst TWAR_TWGCE = 0x1; // TWI General Call Recognition Enable Bit\r\nconst STATUS_BUS_ERROR = 0x0;\r\nconst STATUS_TWI_IDLE = 0xf8;\r\n// Master states\r\nconst STATUS_START = 0x08;\r\nconst STATUS_REPEATED_START = 0x10;\r\nconst STATUS_SLAW_ACK = 0x18;\r\nconst STATUS_SLAW_NACK = 0x20;\r\nconst STATUS_DATA_SENT_ACK = 0x28;\r\nconst STATUS_DATA_SENT_NACK = 0x30;\r\nconst STATUS_DATA_LOST_ARBITRATION = 0x38;\r\nconst STATUS_SLAR_ACK = 0x40;\r\nconst STATUS_SLAR_NACK = 0x48;\r\nconst STATUS_DATA_RECEIVED_ACK = 0x50;\r\nconst STATUS_DATA_RECEIVED_NACK = 0x58;\r\n// TODO: add slave states\r\n/* eslint-enable @typescript-eslint/no-unused-vars */\r\nexport const twiConfig = {\r\n    twiInterrupt: 0x30,\r\n    TWBR: 0xb8,\r\n    TWSR: 0xb9,\r\n    TWAR: 0xba,\r\n    TWDR: 0xbb,\r\n    TWCR: 0xbc,\r\n    TWAMR: 0xbd,\r\n};\r\n// A simple TWI Event Handler that sends a NACK for all events\r\nexport class NoopTWIEventHandler {\r\n    constructor(twi) {\r\n        this.twi = twi;\r\n    }\r\n    start() {\r\n        this.twi.completeStart();\r\n    }\r\n    stop() {\r\n        this.twi.completeStop();\r\n    }\r\n    connectToSlave() {\r\n        this.twi.completeConnect(false);\r\n    }\r\n    writeByte() {\r\n        this.twi.completeWrite(false);\r\n    }\r\n    readByte() {\r\n        this.twi.completeRead(0xff);\r\n    }\r\n}\r\nexport class AVRTWI {\r\n    constructor(cpu, config, freqHz) {\r\n        this.cpu = cpu;\r\n        this.config = config;\r\n        this.freqHz = freqHz;\r\n        this.eventHandler = new NoopTWIEventHandler(this);\r\n        // Interrupts\r\n        this.TWI = {\r\n            address: this.config.twiInterrupt,\r\n            flagRegister: this.config.TWCR,\r\n            flagMask: TWCR_TWINT,\r\n            enableRegister: this.config.TWCR,\r\n            enableMask: TWCR_TWIE,\r\n        };\r\n        this.updateStatus(STATUS_TWI_IDLE);\r\n        this.cpu.writeHooks[config.TWCR] = (value) => {\r\n            this.cpu.data[config.TWCR] = value;\r\n            const clearInt = value & TWCR_TWINT;\r\n            this.cpu.clearInterruptByFlag(this.TWI, value);\r\n            this.cpu.updateInterruptEnable(this.TWI, value);\r\n            const { status } = this;\r\n            if (clearInt && value & TWCR_TWEN) {\r\n                const twdrValue = this.cpu.data[this.config.TWDR];\r\n                this.cpu.addClockEvent(() => {\r\n                    if (value & TWCR_TWSTA) {\r\n                        this.eventHandler.start(status !== STATUS_TWI_IDLE);\r\n                    }\r\n                    else if (value & TWCR_TWSTO) {\r\n                        this.eventHandler.stop();\r\n                    }\r\n                    else if (status === STATUS_START) {\r\n                        this.eventHandler.connectToSlave(twdrValue >> 1, twdrValue & 0x1 ? false : true);\r\n                    }\r\n                    else if (status === STATUS_SLAW_ACK || status === STATUS_DATA_SENT_ACK) {\r\n                        this.eventHandler.writeByte(twdrValue);\r\n                    }\r\n                    else if (status === STATUS_SLAR_ACK || status === STATUS_DATA_RECEIVED_ACK) {\r\n                        const ack = !!(value & TWCR_TWEA);\r\n                        this.eventHandler.readByte(ack);\r\n                    }\r\n                }, 0);\r\n                return true;\r\n            }\r\n        };\r\n    }\r\n    get prescaler() {\r\n        switch (this.cpu.data[this.config.TWSR] & TWSR_TWPS_MASK) {\r\n            case 0:\r\n                return 1;\r\n            case 1:\r\n                return 4;\r\n            case 2:\r\n                return 16;\r\n            case 3:\r\n                return 64;\r\n        }\r\n        // We should never get here:\r\n        throw new Error('Invalid prescaler value!');\r\n    }\r\n    get sclFrequency() {\r\n        return this.freqHz / (16 + 2 * this.cpu.data[this.config.TWBR] * this.prescaler);\r\n    }\r\n    completeStart() {\r\n        this.updateStatus(this.status === STATUS_TWI_IDLE ? STATUS_START : STATUS_REPEATED_START);\r\n    }\r\n    completeStop() {\r\n        this.cpu.data[this.config.TWCR] &= ~TWCR_TWSTO;\r\n        this.updateStatus(STATUS_TWI_IDLE);\r\n    }\r\n    completeConnect(ack) {\r\n        if (this.cpu.data[this.config.TWDR] & 0x1) {\r\n            this.updateStatus(ack ? STATUS_SLAR_ACK : STATUS_SLAR_NACK);\r\n        }\r\n        else {\r\n            this.updateStatus(ack ? STATUS_SLAW_ACK : STATUS_SLAW_NACK);\r\n        }\r\n    }\r\n    completeWrite(ack) {\r\n        this.updateStatus(ack ? STATUS_DATA_SENT_ACK : STATUS_DATA_SENT_NACK);\r\n    }\r\n    completeRead(value) {\r\n        const ack = !!(this.cpu.data[this.config.TWCR] & TWCR_TWEA);\r\n        this.cpu.data[this.config.TWDR] = value;\r\n        this.updateStatus(ack ? STATUS_DATA_RECEIVED_ACK : STATUS_DATA_RECEIVED_NACK);\r\n    }\r\n    get status() {\r\n        return this.cpu.data[this.config.TWSR] & TWSR_TWS_MASK;\r\n    }\r\n    updateStatus(value) {\r\n        const { TWSR } = this.config;\r\n        this.cpu.data[TWSR] = (this.cpu.data[TWSR] & ~TWSR_TWS_MASK) | value;\r\n        this.cpu.setInterruptFlag(this.TWI);\r\n    }\r\n}\r\n","// Register bits:\r\nconst SPCR_SPIE = 0x80; //  SPI Interrupt Enable\r\nconst SPCR_SPE = 0x40; // SPI Enable\r\nconst SPCR_DORD = 0x20; // Data Order\r\nconst SPCR_MSTR = 0x10; //  Master/Slave Select\r\nconst SPCR_CPOL = 0x8; // Clock Polarity\r\nconst SPCR_CPHA = 0x4; // Clock Phase\r\nconst SPCR_SPR1 = 0x2; // SPI Clock Rate Select 1\r\nconst SPCR_SPR0 = 0x1; // SPI Clock Rate Select 0\r\nconst SPSR_SPR_MASK = SPCR_SPR1 | SPCR_SPR0;\r\nconst SPSR_SPIF = 0x80; // SPI Interrupt Flag\r\nconst SPSR_WCOL = 0x40; // Write COLlision Flag\r\nconst SPSR_SPI2X = 0x1; // Double SPI Speed Bit\r\nexport const spiConfig = {\r\n    spiInterrupt: 0x22,\r\n    SPCR: 0x4c,\r\n    SPSR: 0x4d,\r\n    SPDR: 0x4e,\r\n};\r\nconst bitsPerByte = 8;\r\nexport class AVRSPI {\r\n    constructor(cpu, config, freqHz) {\r\n        this.cpu = cpu;\r\n        this.config = config;\r\n        this.freqHz = freqHz;\r\n        this.onTransfer = null;\r\n        this.transmissionActive = false;\r\n        this.receivedByte = 0;\r\n        // Interrupts\r\n        this.SPI = {\r\n            address: this.config.spiInterrupt,\r\n            flagRegister: this.config.SPSR,\r\n            flagMask: SPSR_SPIF,\r\n            enableRegister: this.config.SPCR,\r\n            enableMask: SPCR_SPIE,\r\n        };\r\n        const { SPCR, SPSR, SPDR } = config;\r\n        cpu.writeHooks[SPDR] = (value) => {\r\n            var _a, _b;\r\n            if (!(cpu.data[SPCR] & SPCR_SPE)) {\r\n                // SPI not enabled, ignore write\r\n                return;\r\n            }\r\n            // Write collision\r\n            if (this.transmissionActive) {\r\n                cpu.data[SPSR] |= SPSR_WCOL;\r\n                return true;\r\n            }\r\n            // Clear write collision / interrupt flags\r\n            cpu.data[SPSR] &= ~SPSR_WCOL;\r\n            this.cpu.clearInterrupt(this.SPI);\r\n            this.receivedByte = (_b = (_a = this.onTransfer) === null || _a === void 0 ? void 0 : _a.call(this, value)) !== null && _b !== void 0 ? _b : 0;\r\n            const cyclesToComplete = this.clockDivider * bitsPerByte;\r\n            this.transmissionActive = true;\r\n            this.cpu.addClockEvent(() => {\r\n                this.cpu.data[SPDR] = this.receivedByte;\r\n                this.cpu.setInterruptFlag(this.SPI);\r\n                this.transmissionActive = false;\r\n            }, cyclesToComplete);\r\n            return true;\r\n        };\r\n        cpu.writeHooks[SPSR] = (value) => {\r\n            this.cpu.data[SPSR] = value;\r\n            this.cpu.clearInterruptByFlag(this.SPI, value);\r\n        };\r\n    }\r\n    reset() {\r\n        this.transmissionActive = false;\r\n        this.receivedByte = 0;\r\n    }\r\n    get isMaster() {\r\n        return this.cpu.data[this.config.SPCR] & SPCR_MSTR ? true : false;\r\n    }\r\n    get dataOrder() {\r\n        return this.cpu.data[this.config.SPCR] & SPCR_DORD ? 'lsbFirst' : 'msbFirst';\r\n    }\r\n    get spiMode() {\r\n        const CPHA = this.cpu.data[this.config.SPCR] & SPCR_CPHA;\r\n        const CPOL = this.cpu.data[this.config.SPCR] & SPCR_CPOL;\r\n        return ((CPHA ? 2 : 0) | (CPOL ? 1 : 0));\r\n    }\r\n    /**\r\n     * The clock divider is only relevant for Master mode\r\n     */\r\n    get clockDivider() {\r\n        const base = this.cpu.data[this.config.SPSR] & SPSR_SPI2X ? 2 : 4;\r\n        switch (this.cpu.data[this.config.SPCR] & SPSR_SPR_MASK) {\r\n            case 0b00:\r\n                return base;\r\n            case 0b01:\r\n                return base * 4;\r\n            case 0b10:\r\n                return base * 16;\r\n            case 0b11:\r\n                return base * 32;\r\n        }\r\n        // We should never get here:\r\n        throw new Error('Invalid divider value!');\r\n    }\r\n    /**\r\n     * The SPI freqeuncy is only relevant to Master mode.\r\n     * In slave mode, the frequency can be as high as F(osc) / 4.\r\n     */\r\n    get spiFrequency() {\r\n        return this.freqHz / this.clockDivider;\r\n    }\r\n}\r\n","/**\r\n * AVR8 Clock\r\n * Part of AVR8js\r\n * Reference: http://ww1.microchip.com/downloads/en/DeviceDoc/ATmega48A-PA-88A-PA-168A-PA-328-P-DS-DS40002061A.pdf\r\n *\r\n * Copyright (C) 2020, Uri Shaked\r\n */\r\nconst CLKPCE = 128;\r\nexport const clockConfig = {\r\n    CLKPR: 0x61,\r\n};\r\nconst prescalers = [\r\n    1,\r\n    2,\r\n    4,\r\n    8,\r\n    16,\r\n    32,\r\n    64,\r\n    128,\r\n    256,\r\n    // The following values are \"reserved\" according to the datasheet, so we measured\r\n    // with a scope to figure them out (on ATmega328p)\r\n    2,\r\n    4,\r\n    8,\r\n    16,\r\n    32,\r\n    64,\r\n    128,\r\n];\r\nexport class AVRClock {\r\n    constructor(cpu, baseFreqHz, config = clockConfig) {\r\n        this.cpu = cpu;\r\n        this.baseFreqHz = baseFreqHz;\r\n        this.config = config;\r\n        this.clockEnabledCycles = 0;\r\n        this.prescalerValue = 1;\r\n        this.cyclesDelta = 0;\r\n        this.cpu.writeHooks[this.config.CLKPR] = (clkpr) => {\r\n            if ((!this.clockEnabledCycles || this.clockEnabledCycles < cpu.cycles) && clkpr === CLKPCE) {\r\n                this.clockEnabledCycles = this.cpu.cycles + 4;\r\n            }\r\n            else if (this.clockEnabledCycles && this.clockEnabledCycles >= cpu.cycles) {\r\n                this.clockEnabledCycles = 0;\r\n                const index = clkpr & 0xf;\r\n                const oldPrescaler = this.prescalerValue;\r\n                this.prescalerValue = prescalers[index];\r\n                this.cpu.data[this.config.CLKPR] = index;\r\n                if (oldPrescaler !== this.prescalerValue) {\r\n                    this.cyclesDelta =\r\n                        (cpu.cycles + this.cyclesDelta) * (oldPrescaler / this.prescalerValue) - cpu.cycles;\r\n                }\r\n            }\r\n            return true;\r\n        };\r\n    }\r\n    get frequency() {\r\n        return this.baseFreqHz / this.prescalerValue;\r\n    }\r\n    get prescaler() {\r\n        return this.prescalerValue;\r\n    }\r\n    get timeNanos() {\r\n        return ((this.cpu.cycles + this.cyclesDelta) / this.frequency) * 1e9;\r\n    }\r\n    get timeMicros() {\r\n        return ((this.cpu.cycles + this.cyclesDelta) / this.frequency) * 1e6;\r\n    }\r\n    get timeMillis() {\r\n        return ((this.cpu.cycles + this.cyclesDelta) / this.frequency) * 1e3;\r\n    }\r\n}\r\n","/**\r\n * AVR8js\r\n *\r\n * Copyright (C) 2019, 2020, Uri Shaked\r\n */\r\nexport { CPU } from './cpu/cpu';\r\nexport { avrInstruction } from './cpu/instruction';\r\nexport { avrInterrupt } from './cpu/interrupt';\r\nexport { AVRTimer, timer0Config, timer1Config, timer2Config, } from './peripherals/timer';\r\nexport { AVRIOPort, portAConfig, portBConfig, portCConfig, portDConfig, portEConfig, portFConfig, portGConfig, portHConfig, portJConfig, portKConfig, portLConfig, PinState, } from './peripherals/gpio';\r\nexport { AVRUSART, usart0Config } from './peripherals/usart';\r\nexport { AVREEPROM, EEPROMMemoryBackend, eepromConfig, } from './peripherals/eeprom';\r\nexport * from './peripherals/twi';\r\nexport { spiConfig, AVRSPI } from './peripherals/spi';\r\nexport { AVRClock, clockConfig } from './peripherals/clock';\r\n","/**\r\n * Minimal Intel HEX loader\r\n * Part of AVR8js\r\n *\r\n * Copyright (C) 2019, Uri Shaked\r\n */\r\n\r\n export function loadHex(source, target) {\r\n    for (const line of source.split('\\n')) {\r\n      if (line[0] === ':' && line.substr(7, 2) === '00') {\r\n        const bytes = parseInt(line.substr(1, 2), 16);\r\n        const addr = parseInt(line.substr(3, 4), 16);\r\n        for (let i = 0; i < bytes; i++) {\r\n          target[addr + i] = parseInt(line.substr(9 + i * 2, 2), 16);\r\n        }\r\n      }\r\n    }\r\n  }","import * as avr8js from 'avr8js';\r\nimport { loadHex } from './intelhex';\r\n\r\nclass Emulator {\r\n    constructor(leds, button) {\r\n        this.frameId;\r\n        this.cpu;\r\n        this.timer0;\r\n        this.portA;\r\n        this.portB;\r\n        this.portC;\r\n        this.portD;\r\n\r\n        this.program = new Uint16Array();\r\n        this.clockFrequency = 16000000;\r\n        this.flashSize = 32768;\r\n        this.leds = leds;\r\n        this.button = button;\r\n    }\r\n\r\n    loadGame(hex) {\r\n        const temp = new Uint8Array(this.flashSize / 2);\r\n        loadHex(hex, temp);\r\n        this.program = new Uint16Array(temp.buffer);\r\n        this.cpu = new avr8js.CPU(this.program);\r\n\r\n        this.timer0 = new avr8js.AVRTimer(this.cpu, avr8js.timer0Config);\r\n        this.initPorts();\r\n    }\r\n\r\n    initPorts() {\r\n        this.portA = new avr8js.AVRIOPort(this.cpu, avr8js.portAConfig);\r\n        this.portB = new avr8js.AVRIOPort(this.cpu, avr8js.portBConfig);\r\n        this.portC = new avr8js.AVRIOPort(this.cpu, avr8js.portCConfig);\r\n        this.portD = new avr8js.AVRIOPort(this.cpu, avr8js.portDConfig);\r\n\r\n        //TODO: figure out how to configure an input\r\n        //this[this.button.avrPort].setPin(this.button.avrPin, avr8js.PinState.Input);\r\n\r\n        this.button.domElement.addEventListener('mousedown', () => this.buttonPressHandler());\r\n        this.button.domElement.addEventListener('mouseup', () => this.buttonReleaseHandler());\r\n        this.button.domElement.addEventListener('mouseleave', () => this.buttonReleaseHandler());\r\n\r\n        this.portA.addListener(() => {\r\n            this.ledHandler('portA');\r\n        });\r\n\r\n        this.portB.addListener(() => {\r\n            this.ledHandler('portB');\r\n        });\r\n\r\n        this.portC.addListener(() => {\r\n            this.ledHandler('portC');\r\n        });\r\n\r\n        this.portD.addListener(() => {\r\n            this.ledHandler('portD');\r\n        });\r\n    }\r\n\r\n    buttonPressHandler() {\r\n        this[this.button.avrPort].setPin(this.button.avrPin, avr8js.PinState.Low);\r\n    }\r\n\r\n    buttonReleaseHandler() {\r\n        this[this.button.avrPort].setPin(this.button.avrPin, avr8js.PinState.High);\r\n    }\r\n\r\n    ledHandler(port) {\r\n        const connectedLeds = this.leds.filter((led) => {\r\n            return led.avrPort == port;\r\n        });\r\n\r\n        for(let led of connectedLeds) {\r\n            if(this[port].pinState(led.avrPin) === avr8js.PinState.High) {\r\n                led.domElement.classList.remove('off');\r\n                led.domElement.classList.add('on');\r\n                led.state = true;\r\n                continue;\r\n            }\r\n\r\n            led.domElement.classList.remove('on');\r\n            led.domElement.classList.add('off');\r\n            led.state = false;\r\n        }\r\n    }\r\n\r\n    executeGame() {\r\n        const deadline = this.cpu.cycles + (this.clockFrequency / 60); \r\n        while(this.cpu.cycles <= deadline) {\r\n            avr8js.avrInstruction(this.cpu);\r\n            this.cpu.tick();\r\n        }\r\n\r\n        this.frameId = requestAnimationFrame(() => this.executeGame());\r\n    }\r\n\r\n    stopGame() {\r\n        cancelAnimationFrame(this.frameId);\r\n        for(let led of this.leds) {\r\n            if(led.state) {\r\n                led.domElement.classList.remove('on');\r\n                led.domElement.classList.add('off');\r\n                led.state = false;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nwindow.Emulator = Emulator;\r\n"]}